--- string.c.orig	2021-12-30 19:54:43.433929000 +0100
+++ string.c	2021-12-28 17:26:43.658594900 +0100
@@ -845,8 +845,8 @@
 }
 
 /* Internal, do not use. */
-int __must_check _kstrtoul(const char *s, unsigned int base, unsigned long *res);
-int __must_check kstrtoull(const char *s, unsigned int base, unsigned long long *res);
+/*int __must_check _kstrtoul(const char *s, unsigned int base, unsigned long *res);
+int __must_check kstrtoull(const char *s, unsigned int base, unsigned long long *res);*/
 
 /**
  * kstrtoul - convert a string to an unsigned long
@@ -864,19 +864,6 @@
  * Used as a replacement for the obsolete simple_strtoull. Return code must
  * be checked.
 */
-static inline int __must_check kstrtoul(const char *s, unsigned int base, unsigned long *res)
-{
-	/*
-	 * We want to shortcut function call, but
-	 * __builtin_types_compatible_p(unsigned long, unsigned long long) = 0.
-	 */
-	if (sizeof(unsigned long) == sizeof(unsigned long long) &&
-	    __alignof__(unsigned long) == __alignof__(unsigned long long))
-		return kstrtoull(s, base, (unsigned long long *)res);
-	else
-		return _kstrtoul(s, base, res);
-}
-EXPORT_SYMBOL(kstrtoul);
 
 static int _kstrtoull(const char *s, unsigned int base, unsigned long long *res)
 {
@@ -918,3 +905,4 @@
 	*res = tmp;
 	return 0;
 }
+EXPORT_SYMBOL(_kstrtoul);
