# Broadcom Linux Router Makefile
#
# Copyright 2005, Broadcom Corporation
# All Rights Reserved.
#
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
#


include common.mak

define patch_files
 find patches/$(1) -maxdepth 1 -type f -name '*.patch' | sort -t '\0' -n | while read FILE; do \
  ( if patch -p0 -N -s --dry-run < $$FILE 2>/dev/null; then \
   patch -p0 -N -r - --no-backup-if-mismatch < $$FILE; \
  fi ) \
 done
endef

define unpatch_files
 find patches/$(1) -maxdepth 1 -type f -name '*.patch' | sort -t '\0' -n -r | while read FILE; do \
  ( if patch -p0 -Rf --dry-run --silent < $$FILE 2>/dev/null; then \
   patch -p0 -R -N -E -r - --no-backup-if-mismatch < $$FILE; \
  fi ) \
 done
endef

define CMAKE_CrossOptions
 ( \
  echo "SET(CMAKE_CROSSCOMPILING \"TRUE\")" >>$(1); \
  echo "SET(TOP $(TOP))" >>$(1); \
  echo "SET(CMAKE_SYSTEM_NAME Linux)" >>$(1); \
  echo "SET(CMAKE_SYSTEM_VERSION $(LINUX_KERNEL))" >>$(1); \
  echo "SET(CMAKE_SYSTEM $(PLATFORM))" >>$(1); \
  echo "SET(CMAKE_SYSTEM_PROCESSOR $(ARCH))" >>$(1); \
  echo "SET(CMAKE_C_COMPILER $(CC))" >>$(1); \
  echo "SET(CMAKE_CXX_COMPILER $(CXX))" >>$(1); \
  echo "SET(CMAKE_AR $(AR))" >>$(1); \
  echo "SET(CMAKE_LINKER $(LD))" >>$(1); \
  echo "SET(CMAKE_NM $(NM))" >>$(1); \
  echo "SET(CMAKE_OBJCOPY $(OBJCOPY))" >>$(1); \
  echo "SET(CMAKE_OBJDUMP $(OBJDUMP))" >>$(1); \
  echo "SET(CMAKE_RANLIB $(RANLIB))" >>$(1); \
  echo "SET(CMAKE_STRIP $(STRIP))" >>$(1); \
  echo "SET(CMAKE_FIND_ROOT_PATH $(TOOLCHAIN))" >>$(1); \
  echo "SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >>$(1); \
  echo "SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)" >>$(1); \
  echo "SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)" >>$(1); \
 )
endef


#
#
#


SEP=`$(eval progress=$(shell echo $$(($(progress)+1))))` \
printf "\n\033[41;1m   $@ ${progress}$\/${totalSteps} \033[0m\033]2;Building $@ ${progress}$\/${totalSteps}\007\n"

export PARALLEL_BUILD := -j$(shell grep -c '^processor' /proc/cpuinfo)
export HAVE_TOMATO := y
comma := ,

MEDIA_SERVER_STATIC=
INSTALL_ZLIB := $(if $(or $(TCONFIG_BBT)$(TCONFIG_TOR)$(TCONFIG_NGINX),$(if $(MEDIA_SERVER_STATIC),,y)),y,)
INSTALL_SQLITE := $(if $(or $(TCONFIG_NGINX),$(if $(MEDIA_SERVER_STATIC),,y)),y,)

ifeq ($(TCONFIG_BCMWL6),y)
 export CFLAGS += -DTRAFFIC_MGMT
 export CFLAGS += -DTRAFFIC_MGMT_RSSI_POLICY
endif

ifeq ($(TCONFIG_BCMARM),y)
 export CFLAGS += -DBCMWPA2
 ifeq ($(TCONFIG_BCMWL6),y)
  export CFLAGS += -DBCMQOS
  export CFLAGS += -DBCM_DCS
  export CFLAGS += -DEXT_ACS
  export CFLAGS += -DD11AC_IOTYPES
  export CFLAGS += -DNAS_GTK_PER_STA
  export CFLAGS += -DPHYMON
  export CFLAGS += -DPROXYARP
  export CONFIG_MFP=y
  export CFLAGS += -DMFP
  export CFLAGS += -D__CONFIG_MFP__
 endif
endif # TCONFIG_BCMARM

export CFLAGS += $(EXTRACFLAGS)
ifeq ($(TCONFIG_BCMBSD),y)
 export CFLAGS += -DBCM_BSD
endif

ifeq ($(TCONFIG_USB_EXTRAS),y)
 NEED_EX_USB = y
endif

ifeq ($(TCONFIG_MICROSD),y)
 NEED_SD_MODULES = y
endif

ifeq ($(TCONFIG_IPSEC),y)
 export TCONFIG_IPSEC := y
else
 TCONFIG_IPSEC :=
endif

ifeq ($(TCONFIG_RAID),y)
 export TCONFIG_RAID := y
else
 TCONFIG_RAID :=
endif

# Specify iptables/iproute2/ipset/php target
ifeq ($(TCONFIG_BCMARM),y)
 export IPTABLES_TARGET := iptables-1.8.x
 export IPROUTE_TARGET := iproute2-3.x
 export IPSET_TARGET := ipset
 export PHP_TARGET := php
else
 export IPTABLES_TARGET := iptables
 export IPROUTE_TARGET := iproute2
 export IPSET_TARGET := ipset-6.24
 export PHP_TARGET := php5
endif

# IPv6?
ifeq ($(TCONFIG_IPV6),y)
 export TCONFIG_IPV6 := y
else
 TCONFIG_IPV6 :=
endif

# different optimization flags
ifeq ($(TCONFIG_OPTIMIZE_SIZE),y)
 OPTSIZE_FLAG :=
else
 export OPTSIZE_FLAG := -DNO_OPTSIZE
endif

ifeq ($(TCONFIG_OPTIMIZE_SIZE_MORE),y)
 OPTSIZE_MORE_FLAG :=
else
 export OPTSIZE_MORE_FLAG := -DNO_OPTSIZE
endif

ifneq ($(TCONFIG_BCMARM),y)
 ifeq ($(TCONFIG_AIO),y)
  export CFLAG_OPTIMIZE = -O3
 else
  export CFLAG_OPTIMIZE = -Os
 endif
endif

# ffmpeg stuff
FFMPEG_FILTER_CONFIG= $(foreach c, $(2), --$(1)="$(c)")

ifneq ($(TCONFIG_BCMARM),y)
 FFMPEG_DEMUXERS := aac ac3 avi flac h264 matroska mov mp3 mpegvideo vc1
 FFMPEG_PARSERS := aac ac3 h264 mpeg4video mpegaudio mpegvideo
 FFMPEG_DECODERS := aac ac3 flac h264 jpegls mp3 mpeg1video mpeg2video mpeg4 mpegvideo png wmav1 wmav2
 FFMPEG_PROTOCOLS := file

 ifneq ($(TCONFIG_OPTIMIZE_SIZE),y)
  FFMPEG_DEMUXERS += aea aiff anm asf au avs bink caf cavsvideo cdg dts dv ea ea_cdata eac3 filmstrip flic flv fourxm h261 h263 iss iv8 m4v mjpeg mlp mpc mpc8 mpegps \
                     mpegts mpegtsraw mvi nc nuv ogg pcm_alaw pcm_f32be pcm_f32le pcm_f64be pcm_f64le pcm_mulaw pcm_s16be pcm_s16le pcm_s24be pcm_s24le pcm_s32be pcm_s32le \
                     pcm_s8 pcm_u16be pcm_u16le pcm_u24be pcm_u24le pcm_u32be pcm_u32le pcm_u8 qcp r3d rm sox swf tmv truehd vc1t vqf w64 wav wv yop
  FFMPEG_PARSERS += h261 h263 mjpeg mlp
  FFMPEG_DECODERS += atrac3 h261 h263
 endif

 FFMPEG_CONFIGURE_DEMUXERS := $(call FFMPEG_FILTER_CONFIG,enable-demuxer,$(FFMPEG_DEMUXERS))
else # !TCONFIG_BCMARM
 FFMPEG_DISABLED_DEMUXERS := amr apc ape ass bethsoftvid bfi c93 daud dnxhd dsicin dxa ffm gsm gxf idcin iff image2 image2pipe ingenient ipmovie lmlm4 mm mmf msnwc_tcp mtv \
                             mxf nsv nut oma pva rawvideo rl2 roq rpl segafilm shorten siff smacker sol str thp tiertexseq tta txd vmd voc wc3 wsaud wsvqa xa yuv4mpegpipe
 FFMPEG_PARSERS := aac ac3 h264 mpeg4video mpegaudio mpegvideo
 FFMPEG_DECODERS := aac ac3 atrac3 flac h264 jpegls mp3 mpeg1video mpeg2video mpeg4 mpeg4aac mpegvideo png wmav1 wmav2
 FFMPEG_PROTOCOLS := file

 FFMPEG_CONFIGURE_DEMUXERS := $(call FFMPEG_FILTER_CONFIG,disable-demuxer,$(FFMPEG_DISABLED_DEMUXERS))
endif # !TCONFIG_BCMARM

FFMPEG_CONFIGURE_PARSERS := $(call FFMPEG_FILTER_CONFIG,enable-parser,$(FFMPEG_PARSERS))
FFMPEG_CONFIGURE_DECODERS := $(call FFMPEG_FILTER_CONFIG,enable-decoder,$(FFMPEG_DECODERS))
FFMPEG_CONFIGURE_PROTOCOLS := $(call FFMPEG_FILTER_CONFIG,enable-protocol,$(FFMPEG_PROTOCOLS))

# openssl stuff
OPENSSL_CIPHERS := no-ssl2 no-ssl3 no-gost no-heartbeats no-err no-unit-test no-tests
ifeq ($(TCONFIG_BCMARM),)
 ifeq ($(TCONFIG_KEYGEN),)
  ifeq ($(TCONFIG_OPENSSL11),y)
   OPENSSL_CIPHERS += no-camellia no-idea no-rc2 no-cast no-seed no-md4 no-mdc2 no-rmd160 no-cms no-engine no-ocsp no-srp no-ts no-afalgeng no-ocb \
                      no-unit-test no-ui-console no-whirlpool no-blake2 no-cmac no-multiblock no-nextprotoneg no-comp no-ct no-scrypt no-sctp no-siphash no-ubsan \
                      no-rc5 no-rdrand no-capieng no-rfc3779 no-hw no-zlib no-sse2 no-ssl-trace no-dtls1 no-psk no-md2 no-devcryptoeng no-dgram no-dtls
  else
   OPENSSL_CIPHERS += no-sha0 no-smime no-camellia no-krb5 no-rmd160 no-ripemd no-seed no-capieng no-gms no-gmp no-rfc3779 no-hw no-jpake no-zlib no-engines no-sse2 no-libunbound \
                      no-ssl-trace no-dtls1 no-store no-psk no-md2 no-mdc2 no-ts enable-rc5
  endif # TCONFIG_OPENSSL11
 endif # !TCONFIG_KEYGEN
 ifeq ($(TCONFIG_BBT),)
  OPENSSL_CIPHERS += no-rc4
 endif
endif # !TCONFIG_BCMARM

# libcurl flag
ifeq ($(TCONFIG_STUBBY),y)
 CACERT:=--with-ca-fallback
else
 CACERT:=
endif


#
# packages
#


ifeq ($(TCONFIG_BCMARM),y)
 obj-y += libbcm
else
 obj-y += lzma-loader
endif

obj-y += busybox
obj-y += shared
obj-y += nvram$(BCMEX)
obj-$(TCONFIG_BCMARM) += eapd$(BCMEX)/linux
ifneq ($(TCONFIG_BCMARM),y)
 obj-y += et
endif
obj-y += libbcmcrypto
obj-y += wlconf$(BCMEX)
obj-$(TCONFIG_BCMARM) += nas$(BCMEX)
obj-y += prebuilt
obj-$(TCONFIG_EMF) += emf$(BCMEX)
obj-$(TCONFIG_EMF) += igs$(BCMEX)
obj-$(TCONFIG_DPSTA) += dpsta
obj-$(TCONFIG_DHDAP) += dhd $(if $(TCONFIG_BCM7),pciefd)
obj-y += igmpproxy
obj-y += rc
obj-y += rom
obj-y += others
obj-y += www
obj-y += bridge
obj-y += etc
obj-y += pppd
obj-y += rp-pppoe
obj-y += utils$(BCMEX)
obj-y += rstats
obj-y += cstats
obj-y += udpxy
obj-y += hotplug2
obj-y += udevtrigger
obj-$(TCONFIG_BCMARM) += libnfnetlink
obj-y += libusb10
obj-y += usbmodeswitch
obj-$(TCONFIG_BCMARM) += libmnl
obj-y += $(IPSET_TARGET)
obj-$(TCONFIG_BCMARM) += taskset
obj-$(TCONFIG_IPERF) += iperf
obj-$(TCONFIG_BCMBSD) += bsd

ifneq ($(TCONFIG_HTTPS),)
 ifeq ($(TCONFIG_OPENSSL11),y)
  obj-y += openssl-1.1
  export OPENSSLDIR = openssl-1.1
 else
  obj-y += openssl
  export OPENSSLDIR = openssl
 endif
else
 obj-y += cyassl
endif

DNSSEC_BACKEND :=
DNSSEC_OPENSSL :=
DNSSEC_NETTLE :=
ifeq ($(TCONFIG_DNSSEC),y)
 ifneq ($(TCONFIG_HTTPS),)
  #ifneq ($(TCONFIG_OPENSSL11),)
   #DNSSEC_BACKEND := $(OPENSSLDIR)
   #DNSSEC_OPENSSL := y
  #else
   obj-y += gmp
   obj-y += nettle
   DNSSEC_BACKEND := nettle
   DNSSEC_NETTLE := y
  #endif
 endif
endif

obj-y += dnsmasq
obj-y += mssl
obj-y += httpd
obj-y += wanuptime
obj-$(TCONFIG_DNSCRYPT) += libsodium
obj-$(TCONFIG_DNSCRYPT) += dnscrypt
obj-$(TCONFIG_SNMP) += snmp
obj-$(TCONFIG_RAID) += mdadm
obj-$(TCONFIG_NFS) += e2fsprogs
obj-$(TCONFIG_NFS) += libevent
obj-$(TCONFIG_NFS) += portmap
obj-$(TCONFIG_NFS) += libnfsidmap
obj-$(TCONFIG_NFS) += nfs-utils
obj-$(TCONFIG_NOCAT) += glib
obj-$(TCONFIG_NOCAT) += nocat
obj-$(TCONFIG_USB) += e2fsprogs
obj-$(TCONFIG_USB) += p910nd
obj-$(TCONFIG_USB) += comgt
obj-$(TCONFIG_USB) += uqmi
obj-$(TCONFIG_USB) += pdureader
obj-$(TCONFIG_USB) += sd-idle
obj-$(TCONFIG_UPS) += apcupsd
obj-$(TCONFIG_SAMBASRV) += libiconv
obj-$(TCONFIG_SAMBASRV) += samba3
obj-$(TCONFIG_SAMBASRV) += wsdd2

ifeq ($(TCONFIG_BCMARM),y)
 ifeq ($(CONFIG_BCMWL6),y)
  ifeq ($(TCONFIG_TUXERA),y)
   obj-y += tuxera
  else
   ifeq ($(TCONFIG_UFSDA),y)
    obj-$(TCONFIG_NTFS) += ufsd-asus
   endif
  endif
 endif
endif

ifeq ($(CONFIG_BCMWL6),y)
 ifeq ($(TCONFIG_UFSD),y)
  obj-$(TCONFIG_NTFS) += ufsd
 else
  obj-$(TCONFIG_NTFS) += ntfs-3g
 endif
else
 obj-$(TCONFIG_NTFS) += ntfs-3g
endif

obj-$(TCONFIG_EBTABLES) += ebtables
obj-$(TCONFIG_IPV6) += dhcpv6

obj-$(TCONFIG_BBT) += zlib
obj-$(TCONFIG_BBT) += libevent
obj-$(TCONFIG_BBT) += $(OPENSSLDIR)
obj-$(TCONFIG_BBT) += libcurl
obj-$(TCONFIG_BBT) += transmission
obj-$(TCONFIG_MEDIA_SERVER) += zlib
obj-$(TCONFIG_MEDIA_SERVER) += sqlite
obj-$(TCONFIG_MEDIA_SERVER) += ffmpeg
ifeq ($(TCONFIG_BCMARM),y)
 obj-$(TCONFIG_MEDIA_SERVER) += libiconv
endif
obj-$(TCONFIG_MEDIA_SERVER) += libogg
obj-$(TCONFIG_MEDIA_SERVER) += flac
obj-$(TCONFIG_MEDIA_SERVER) += jpeg
obj-$(TCONFIG_MEDIA_SERVER) += libexif
obj-$(TCONFIG_MEDIA_SERVER) += libid3tag
obj-$(TCONFIG_MEDIA_SERVER) += libvorbis
obj-$(TCONFIG_MEDIA_SERVER) += minidlna
obj-$(TCONFIG_CONNTRACK_TOOL) += libnetfilter_conntrack
obj-$(TCONFIG_CONNTRACK_TOOL) += libnetfilter_log
obj-$(TCONFIG_CONNTRACK_TOOL) += libnetfilter_queue
obj-$(TCONFIG_CONNTRACK_TOOL) += conntrack-tools
obj-y += $(IPTABLES_TARGET)
obj-y += $(IPROUTE_TARGET)
obj-$(TCONFIG_L2TP) += xl2tpd
obj-$(TCONFIG_PPTP) += accel-pptp
obj-$(TCONFIG_PPTPD) += pptpd
obj-$(TCONFIG_SSH) += dropbear
obj-$(TCONFIG_ZEBRA) += zebra

ifeq ($(TCONFIG_OPENVPN),y)
 obj-$(INSTALL_ZLIB) += zlib
 obj-y += lzo
 obj-y += $(OPENSSLDIR)
 ifeq ($(TCONFIG_OPTIMIZE_SIZE_MORE),y)
  obj-y += openvpn-2.4
 else
  obj-y += openvpn
 endif
 obj-y += openvpn_plugin_auth_nvram
endif

obj-$(TCONFIG_TOR) += zlib
obj-$(TCONFIG_TOR) += libevent
obj-$(TCONFIG_TOR) += $(OPENSSLDIR)
obj-$(TCONFIG_TOR) += tor
obj-$(TCONFIG_STUBBY) += $(OPENSSLDIR)
obj-$(TCONFIG_STUBBY) += libyaml
obj-$(TCONFIG_STUBBY) += getdns
obj-$(TCONFIG_FTP_SSL) += $(OPENSSLDIR)
obj-$(TCONFIG_FTP) += vsftpd
obj-$(TCONFIG_TINC) += zlib
obj-$(TCONFIG_TINC) += $(OPENSSLDIR)
obj-$(TCONFIG_TINC) += lzo
obj-$(TCONFIG_TINC) += tinc
obj-$(TCONFIG_NGINX) += zlib
obj-$(TCONFIG_NGINX) += sqlite
obj-$(TCONFIG_NGINX) += $(OPENSSLDIR)
obj-$(TCONFIG_NGINX) += libcurl
obj-$(TCONFIG_NGINX) += spawn-fcgi
obj-$(TCONFIG_NGINX) += pcre
obj-$(TCONFIG_NGINX) += libncurses
ifneq ($(TCONFIG_BCMARM),y)
 obj-$(TCONFIG_NGINX) += libatomic_ops
endif
obj-$(TCONFIG_NGINX) += libiconv
obj-$(TCONFIG_NGINX) += libxml2
obj-$(TCONFIG_NGINX) += libpng
obj-$(TCONFIG_NGINX) += jpeg
obj-$(TCONFIG_NGINX) += mysql
obj-$(TCONFIG_NGINX) += $(PHP_TARGET)
obj-$(TCONFIG_NGINX) += nginx
ifeq ($(TCONFIG_BCMARM),y)
 obj-$(TCONFIG_HFS) += $(OPENSSLDIR)
 obj-$(TCONFIG_HFS) += diskdev_cmds-332.25
endif
obj-$(TCONFIG_SDHC) += mmc
obj-$(TCONFIG_NANO) += libncurses
obj-$(TCONFIG_NANO) += nano
obj-y += miniupnpd
obj-y += mdu
obj-$(TCONFIG_WIREGUARD) += wireguard-tools
obj-$(TCONFIG_MDNS) += libdaemon
obj-$(TCONFIG_MDNS) += expat
obj-$(TCONFIG_MDNS) += avahi
obj-$(TCONFIG_ZFS) += zlib
obj-$(TCONFIG_ZFS) += $(OPENSSLDIR)
obj-$(TCONFIG_ZFS) += gettext-tiny
obj-$(TCONFIG_ZFS) += util-linux
obj-$(TCONFIG_ZFS) += zfs
obj-$(TCONFIG_IRQBALANCE) += zlib
obj-$(TCONFIG_IRQBALANCE) += libffi
obj-$(TCONFIG_IRQBALANCE) += libiconv
obj-$(TCONFIG_IRQBALANCE) += glib2
obj-$(TCONFIG_IRQBALANCE) += irqbalance


#
#
#


obj-clean := $(foreach obj, $(obj-y) $(obj-n) $(obj-), $(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)

ifeq ($(TCONFIG_BCMARM),y)
 LINUX_VERSION=2_6_36
 LINUX_KERNEL=2.6.36
 export PLATFORM LIBDIR USRLIBDIR LINUX_VERSION

 ifeq ($(TCONFIG_BCM7),y)
  export BCMSRC=src-rt-7.x.main/src

  ifeq ($(TCONFIG_DHDAP),y)
   export CONFIG_DHDAP=y
   export CFLAGS += -D__CONFIG_DHDAP__
   export DHDAP_USE_SEPARATE_CHECKOUTS := 1
   export SRCBASE_DHD := $(SRCBASE)/../..
   export SRCBASE_FW  := $(SRCBASE)/../../43602/src
   PCIEFD_TARGETS_LIST	:= 43602a1-roml

   ifeq ($(WLTEST),1)
    PCIEFD_TARGET_NAME	:= pcie-ag-splitrx-fdap-mbss-mfgtest-seqcmds-phydbg-txbf-pktctx-amsdutx-ampduretry-chkd2hdma
   else
    PCIEFD_TARGET_NAME	:= pcie-ag-splitrx-fdap-mbss-mfp-wl11k-wl11u-txbf-pktctx-amsdutx-ampduretry-chkd2hdma-proptxstatus
   endif

   PCIEFD_EMBED_HEADER_TEMPLATE := $(SRCBASE_DHD)/shared/rtecdc_router.h.in
   PCIEFD_EMBED_HEADER	:= $(SRCBASE_DHD)/shared/rtecdc_router.h
   obj-pciefd		:= $(patsubst %,%-obj,$(PCIEFD_TARGETS_LIST))
   install-pciefd		:= $(patsubst %,%-install,$(PCIEFD_TARGETS_LIST))
  endif # TCONFIG_DHDAP

  ifeq ($(TCONFIG_GMAC3),y)
   export CFLAGS += -D__CONFIG_GMAC3__
  endif

 else # TCONFIG_BCM7
  export BCMSRC=src-rt-6.x.4708
 endif # TCONFIG_BCM7

 WLAN_ComponentsInUse := bcmwifi clm ppr olpc
 include $(SRCBASE)/makefiles/WLAN_Common.mk
 export BASEDIR := $(WLAN_TreeBaseA)
 export EXTRALDFLAGS = -lgcc_s
 export EXTRALDFLAGS2 = -L$(TOP)/nvram$(BCMEX) -lnvram -L$(TOP)/shared -lshared
 export LD_LIBRARY_PATH := $(SRCBASE)/toolchains/hndtools-arm-linux-2.6.36-uclibc-4.5.3/lib

 ifeq (2_6_36,$(LINUX_VERSION))
  ifeq ($(TCONFIG_BCM7),y)
   export LINUXDIR := $(SRCBASE)/linux/linux-2.6.36
  else
   export LINUXDIR := $(BASEDIR)/src-rt-6.x.4708/linux/linux-2.6.36
  endif # TCONFIG_BCM7
  export KBUILD_VERBOSE := 1
  export BUILD_MFG := 0
 endif # LINUX_VERSION

 SUBMAKE_SETTINGS = SRCBASE=$(SRCBASE) BASEDIR=$(BASEDIR)
 SUBMAKE_SETTINGS += ARCH=$(ARCH)
 export CFLAGS += -O2
 export OPTCFLAGS = -O2
 WLCFGDIR=$(SRCBASE)/wl/config

 ifeq ($(TCONFIG_EMF),y)
  export CFLAGS += -D__CONFIG_EMF__
 endif

 ROOT_IMG := target.squashfs
 CRAMFSDIR := cramfs

 export MKSYM :=

 obj-prelibs =$(filter nvram$(BCMEX) libbcmcrypto shared netconf libupnp libz libbcm, $(obj-y))
 obj-postlibs := $(filter-out $(obj-prelibs), $(obj-y))

 ifeq ($(TCONFIG_BCMWL6),y)
  include ../../$(SRCBASE)/makefiles/WLAN_Common.mk
 endif
endif # TCONFIG_BCMARM


#
# Basic rules
#


all: countSteps clean-build libc $(obj-y) $(if $(TCONFIG_BCM7),version,) kernel

countSteps:
	@totalSteps=0
	@progress=0
	@$(foreach n, $(obj-y), $(eval totalSteps=$(shell echo $$(($(totalSteps)+1)))))
	@echo ${totalSteps}

ifeq ($(TCONFIG_BCM7),y)
version: $(SRCBASE)/include/epivers.h

$(SRCBASE)/include/epivers.h:
	$(MAKE) -C $(SRCBASE)/include
ifeq ($(TCONFIG_DHDAP),y)
	$(MAKE) -C $(SRCBASE_DHD)/include
	$(MAKE) -C $(SRCBASE_FW)/include
endif
endif

kernel: $(LINUXDIR)/.config
	@$(SEP)

ifneq ($(TCONFIG_BCMARM),y)
#	@if ! grep -q "CONFIG_EMBEDDED_RAMDISK=y" $(LINUXDIR)/.config ; then \
#		$(MAKE) -C $(LINUXDIR) zImage CC=$(KERNELCC) $(PARALLEL_BUILD); \
#	fi
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
		$(MAKE) -C $(LINUXDIR) modules CC=$(KERNELCC) $(PARALLEL_BUILD); \
	fi
	$(MAKE) -C $(LINUXDIR)/arch/mips/brcm-boards/bcm947xx/compressed srctree=$(LINUXDIR) TCONFIG_MIPSR2=$(TCONFIG_MIPSR2) $(PARALLEL_BUILD)
else # TCONFIG_BCMARM
	$(MAKE) compressed-clean #shibby
	(echo '.NOTPARALLEL:' ; cat ${LINUXDIR}/Makefile) |\
		$(MAKE) $(PARALLEL_BUILD) -C ${LINUXDIR} -f - $(SUBMAKE_SETTINGS) zImage
	+$(MAKE) CONFIG_SQUASHFS=$(CONFIG_SQUASHFS) -C $(SRCBASE)/router/compressed ARCH=$(ARCH)

	@$(SEP)
	$(if $(shell grep "CONFIG_MODULES=y" ${LINUXDIR}/.config), \
	(echo '.NOTPARALLEL:' ; cat ${LINUXDIR}/Makefile) | $(MAKE) $(PARALLEL_BUILD) -C ${LINUXDIR} -f - $(SUBMAKE_SETTINGS) MFG_WAR=1 zImage ; \
	(echo '.NOTPARALLEL:' ; cat ${LINUXDIR}/Makefile) | $(MAKE) $(PARALLEL_BUILD) -C ${LINUXDIR} -f - ARCH=$(ARCH) modules)
	# Preserve the debug versions of these and strip for release
	$(call STRIP_DEBUG_SYMBOLS,$(LINUXDIR)/vmlinux)
	$(call STRIP_DEBUG_SYMBOLS,$(LINUXDIR)/drivers/net/wl/wl.ko)
	$(call STRIP_DEBUG_SYMBOLS,$(LINUXDIR)/drivers/net/et/et.ko)
	$(call STRIP_DEBUG_SYMBOLS,$(LINUXDIR)/drivers/net/ctf/ctf.ko)
	$(call STRIP_DEBUG_SYMBOLS,$(LINUXDIR)/drivers/net/bcm57xx/bcm57xx.ko)
	$(call STRIP_DEBUG_SYMBOLS,$(LINUXDIR)/drivers/net/emf/emf.ko)
	$(call STRIP_DEBUG_SYMBOLS,$(LINUXDIR)/drivers/net/igs/igs.ko)
endif # !TCONFIG_BCMARM

ifneq ($(TCONFIG_BCMARM),y)
lzma-loader:
	@$(SEP)
	$(MAKE) -C $(SRCBASE)/lzma-loader CROSS_COMPILE=$(CROSS_COMPILE) TCONFIG_MIPSR2=$(TCONFIG_MIPSR2) $(PARALLEL_BUILD)

lzma-loader-install:
endif # !TCONFIG_BCMARM

kmod: dummy
	@$(SEP)
	$(MAKE) -C $(LINUXDIR) modules CC=$(KERNELCC) $(PARALLEL_BUILD)

testfind:
	cd $(TARGETDIR)/lib/modules/* && find -name "*.o" -exec mv -i {} . \; || true
	cd $(TARGETDIR)/lib/modules/* && find -type d -delete || true

countInstallSteps:
	@totalSteps=0
	@progress=0
	@$(foreach n, $(obj-install), $(eval totalSteps=$(shell echo $$(($(totalSteps)+1)))))
	@echo ${totalSteps}

install package: countInstallSteps $(obj-install) $(LINUXDIR)/.config
	@printf "\n\033[41;1m   Installing \033[0m\033]2;Installing\007\n"
	install -d $(TARGETDIR)

# kernel modules
	$(MAKE) -C $(LINUXDIR) modules_install \
		INSTALL_MOD_STRIP="--strip-debug -x -R .comment -R .note -R .pdr -R .mdebug.abi32 -R .note.gnu.build-id -R .gnu.attributes -R .reginfo" \
		DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR)

ifneq ($(TCONFIG_BCMARM),y)
ifneq ($(CONFIG_BCMWL6)$(TCONFIG_BLINK),)
ifneq ($(TCONFIG_USBAP),y)
	-cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv diag/* . && rm -rf diag
	-cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv et.4702/* . && rm -rf et.4702 || true
	-cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv usb/* . && rm -rf usb
endif
endif
else
	-cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv diag/* . && rm -rf diag
	-cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv et.4702/* . && rm -rf et.4702 || true
endif # !TCONFIG_BCMARM
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv et/* . && rm -rf et || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv wl/* . && rm -rf wl || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv cifs/* . && rm -rf cifs
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv jffs2/* . && rm -rf jffs2 || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv jffs/* . && rm -rf jffs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/lib && mv zlib_inflate/* . && rm -rf zlib_inflate || true
	cd $(TARGETDIR)/lib/modules/*/kernel/lib && mv zlib_deflate/* . && rm -rf zlib_deflate || true
	cd $(TARGETDIR)/lib/modules/*/kernel/lib && mv lzo/* . && rm -rf lzo || true
	rm -rf $(TARGETDIR)/lib/modules/*/pcmcia

	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv ext2/* . && rm -rf ext2 || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv ext3/* . && rm -rf ext3 || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv jbd/* . && rm -rf jbd || true
ifeq ($(TCONFIG_BCMARM),y)
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv ext4/* . && rm -rf ext4 || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv jbd2/* . && rm -rf jbd2 || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv exfat/* . && rm -rf exfat || true
endif
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv fat/* . && rm -rf fat || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv jfs/* . && rm -rf jfs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv vfat/* . && rm -rf vfat || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv msdos/* . && rm -rf msdos || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv fuse/* . && rm -rf fuse || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv ntfs/* . && rm -rf ntfs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv smbfs/* . && rm -rf smbfs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv reiserfs/* . && rm -rf reiserfs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv hfs/* . && rm -rf hfs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv hfsplus/* . && rm -rf hfsplus || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv lockd/* . && rm -rf lockd || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv nfsd/* . && rm -rf nfsd || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv nfs/* . && rm -rf nfs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv xfs/* . && rm -rf xfs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv nls/* . && rm -rf nls || true
	cd $(TARGETDIR)/lib/modules/*/kernel/fs && mv exportfs/* . && rm -rf exportfs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/net && mv sunrpc/* . && rm -rf sunrpc || true
	cd $(TARGETDIR)/lib/modules/*/kernel/net && mv auth_gss/* . && rm -rf auth_gss || true
	cd $(TARGETDIR)/lib/modules/*/kernel/sound/core && mv oss/* . && rm -rf oss || true
	cd $(TARGETDIR)/lib/modules/*/kernel/sound/core && mv seq/* . && rm -rf seq || true
	cd $(TARGETDIR)/lib/modules/*/kernel/sound && mv core/* . && rm -rf core || true
	cd $(TARGETDIR)/lib/modules/*/kernel/sound && mv usb/* . && rm -rf usb || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/usb && mv hcd/* . && rm -rf hcd || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/usb && mv host/* . && rm -rf host || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/usb && mv storage/* . && rm -rf storage || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/usb && mv serial/* . && rm -rf serial || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/usb && mv core/* . && rm -rf core || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/usb && mv class/* . && rm -rf class || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/usb && mv misc/* . && rm -rf misc || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/usb && mv usbip/* . && rm -rf usbip || true
ifneq ($(CONFIG_BCMWL6)$(TCONFIG_BLINK),)
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/mmc && mv core/* . && rm -rf core || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/mmc && mv card/* . && rm -rf card || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/mmc && mv host/* . && rm -rf host || true
endif
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/hid && mv usbhid/* . && rm -rf usbhid || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/input && mv joystick/* . && rm -rf joystick || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/input && mv keyboard/* . && rm -rf keyboard || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/input && mv misc/* . && rm -rf misc || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/input && mv mouse/* . && rm -rf mouse || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/media/video && mv uvc/* . && rm -rf uvc || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/media/video && mv pwc/* . && rm -rf pwc || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/media/video/gspca && mv gl860/* . && rm -rf gl860 || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/media/video/gspca && mv m5602/* . && rm -rf m5602 || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/media/video/gspca && mv stv06xx/* . && rm -rf stv06xx || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/media/video && mv gspca/* . && rm -rf gspca || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/media && mv video/* . && rm -rf video || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv bcm57xx/* . && rm -rf bcm57xx || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv emf/* . && rm -rf emf || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv igs/* . && rm -rf igs || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv ctf/* . && rm -rf ctf || true
	cd $(TARGETDIR)/lib/modules/*/kernel/drivers/net && mv usb/* . && rm -rf usb || true
	cd $(TARGETDIR)/lib/modules && rm -f */source || true

# misc
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) ; do \
		(cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done

ifneq ($(TCONFIG_L7),y)
	rm -f $(TARGETDIR)/usr/lib/*tables/libipt_layer7.so
endif

# uClibc
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/ld-uClibc.so.0 $(TARGETDIR)/lib/
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libcrypt.so.0 $(TARGETDIR)/lib/
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libpthread.so.0 $(TARGETDIR)/lib/
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libgcc_s.so.1 $(TARGETDIR)/lib/
	$(STRIP) $(TARGETDIR)/lib/libgcc_s.so.1
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libc.so.0 $(TARGETDIR)/lib/
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libdl.so.0 $(TARGETDIR)/lib/
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libm.so.0 $(TARGETDIR)/lib/
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libnsl.so.0 $(TARGETDIR)/lib/
ifneq ($(TCONFIG_BCMARM)$(TCONFIG_SSH),)
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libutil.so.0 $(TARGETDIR)/lib/
endif
ifeq ($(TCONFIG_USB),y)
ifneq ($(TCONFIG_BCMARM),y)
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/librt-0.9.30.1.so $(TARGETDIR)/lib/librt.so.0
else
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/librt.so.0 $(TARGETDIR)/lib/librt.so.0
endif
endif # TCONFIG_USB
ifneq ($(TCONFIG_NGINX)$(TCONFIG_NANO),)
ifneq ($(TCONFIG_BCMARM),y)
	install $(LIBDIR)/libstdc++.so.6 $(TARGETDIR)/lib/libstdc++.so.6
else
	install $(LIBDIR)/../arm-linux/lib/libstdc++.so.6 $(TARGETDIR)/lib/libstdc++.so.6
endif # TCONFIG_BCMARM
	cd $(TARGETDIR)/lib && ln -sf libstdc++.so.6 libstdc++.so
	$(STRIP) $(TARGETDIR)/lib/libstdc++.so.6
endif # TCONFIG_NGINX TCONFIG_NANO
ifneq ($(TCONFIG_OPTIMIZE_SHARED_LIBS),y)
	install $(TOOLCHAIN)/arm-brcm-linux-uclibcgnueabi/sysroot/lib/libresolv.so.0 $(TARGETDIR)/lib/
	$(STRIP) $(TARGETDIR)/lib/*.so.0
endif

	@cd $(TARGETDIR) && $(TOP)/others/rootprep.sh

ifneq ($(TCONFIG_BBT)$(TCONFIG_SAMBASRV),yy)
	@cd $(TARGETDIR) && $(TOP)/others/rootprep.sh ln_usr_share
else
ifeq ($(TCONFIG_TOR),y)
	@cd $(TARGETDIR) && $(TOP)/others/rootprep.sh ln_tor_geoip
endif
endif

	@echo ---

ifeq ($(TCONFIG_OPTIMIZE_SHARED_LIBS),y)
ifneq ($(TCONFIG_BCMARM),y)
	@$(SRCBASE)/btools/libfoo.pl
endif
else
	@$(SRCBASE)/btools/libfoo.pl --noopt
endif
	@chmod 0555 $(TARGETDIR)/lib/*.so*
	@chmod 0555 $(TARGETDIR)/usr/lib/*.so*

# moved to run after libfoo.pl - to make sure shared libs include all symbols needed by extras
# separated/copied extra stuff
	@rm -rf $(PLATFORMDIR)/extras
	@mkdir $(PLATFORMDIR)/extras
	@mkdir $(PLATFORMDIR)/extras/ipsec
	@mkdir $(PLATFORMDIR)/extras/raid
	@mv $(TARGETDIR)/lib/modules/*/kernel/net/ipv4/ip_gre.*o $(PLATFORMDIR)/extras/ || true
#	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/usr/lib/*tables/libipt_policy.*o $(PLATFORMDIR)/extras/ipsec/ || true

	$(if $(TCONFIG_OPENVPN),@cp -f,$(if $(TCONFIG_USB_EXTRAS),@cp -f,$(if $(TCONFIG_IPV6),@cp -f,@mv))) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/tun.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_EBTABLES),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/bridge/netfilter/ebt*.*o $(PLATFORMDIR)/extras/ || true

	$(if $(TCONFIG_RAID),@cp -f,@mv) $(TARGETDIR)/usr/sbin/mdadm $(PLATFORMDIR)/extras/raid/ || true
	$(if $(TCONFIG_RAID),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/md/*.ko $(PLATFORMDIR)/extras/raid/ || true
	$(if $(TCONFIG_RAID),@ls,@rm -rf) $(TARGETDIR)/lib/modules/*/kernel/drivers/md || true

	@cp $(TARGETDIR)/lib/modules/*/kernel/net/ipv4/netfilter/ip_set*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/net/ifb.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/net/sched/sch_red.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/fs/ntfs.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/fs/smbfs.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/fs/reiserfs.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/fs/jfs.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_NFS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nfs.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_NFS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nfsd.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_NFS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/lockd.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_NFS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/exportfs.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_NFS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/sunrpc.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/net/auth_rpcgss.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/net/rpcsec_gss_krb5.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/fs/xfs.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/scsi/sr_mod.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/scanner.*o $(PLATFORMDIR)/extras/ || true

	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/usbserial.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/option.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/sierra.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/cdc-acm.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/mii.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/cdc_*.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/usbnet.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/huawei_ether.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/rndis_host.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/cdc-wdm.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/qmi_wwan.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/ftdi_sio.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/pl2303.*o $(PLATFORMDIR)/extras/ || true
ifneq ($(CONFIG_BCMWL6)$(TCONFIG_BLINK),)
	$(if $(NEED_SD_MODULES),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/mmc/*.*o $(PLATFORMDIR)/extras/ || true
	$(if $(NEED_SD_MODULES),@ls,@rm -rf) $(TARGETDIR)/lib/modules/*/kernel/drivers/mmc || true
endif

	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/ch341.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/usbip*.*o $(PLATFORMDIR)/extras/ || true
ifeq ($(TCONFIG_BCMARM),y)
	$(if $(TCONFIG_UPS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/usbkbd.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_UPS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/hid*.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/usbmouse.*o $(PLATFORMDIR)/extras/ || true
else
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/hid/usbkbd.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/hid/usbmouse.*o $(PLATFORMDIR)/extras/ || true
endif
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/ipw.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/audio.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/ov51*.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/pwc*.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/emi*.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/net/cdc_subset.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/net/ipheth.*o $(PLATFORMDIR)/extras/ || true
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/drivers/net/usb || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/media/* $(PLATFORMDIR)/extras/ || true
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/drivers/media || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/sound/* $(PLATFORMDIR)/extras/ || true
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/drivers/sound || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/sound/* $(PLATFORMDIR)/extras/ || true
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/sound || true
ifneq ($(TCONFIG_BCMARM),y)
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/input/evdev.*o $(PLATFORMDIR)/extras/ || true
endif
	$(if $(TCONFIG_UPS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/input/* $(PLATFORMDIR)/extras/ || true
ifneq ($(TCONFIG_BCMARM),y)
	$(if $(TCONFIG_UPS),@ls,@rm -rf) $(TARGETDIR)/lib/modules/*/kernel/drivers/input || true
endif
	$(if $(TCONFIG_UPS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/hid/* $(PLATFORMDIR)/extras/ || true
ifneq ($(TCONFIG_BCMARM),y)
	$(if $(TCONFIG_UPS),@ls,@rm -rf) $(TARGETDIR)/lib/modules/*/kernel/drivers/hid || true
endif
	@cp -f $(TARGETDIR)/lib/modules/*/kernel/drivers/net/bcm57*.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_CTF),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/ctf*.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_PPTP),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/pptp.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_L2TP),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/net/pppol2tp.*o $(PLATFORMDIR)/extras/ || true
	@mv $(TARGETDIR)/lib/modules/*/kernel/drivers/net/ppp_deflate.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/crypto/*.ko $(PLATFORMDIR)/extras/ipsec/ || true
	$(if $(TCONFIG_IPSEC),@ls,@rm -rf) $(TARGETDIR)/lib/modules/*/kernel/crypto || true
	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/xfrm/*.ko $(PLATFORMDIR)/extras/ipsec/ || true
	$(if $(TCONFIG_IPSEC),@ls,@rm -rf) $(TARGETDIR)/lib/modules/*/kernel/net/xfrm || true
	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/key/*.ko $(PLATFORMDIR)/extras/ipsec/ || true
	$(if $(TCONFIG_IPSEC),@ls,@rm -rf) $(TARGETDIR)/lib/modules/*/kernel/net/key || true
	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/ipv*/xfrm*.ko $(PLATFORMDIR)/extras/ipsec/ || true
#	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/ipv*/tunnel*.ko $(PLATFORMDIR)/extras/ipsec/ || true
	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/ipv*/ah*.ko $(PLATFORMDIR)/extras/ipsec/ || true
	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/ipv*/esp*.ko $(PLATFORMDIR)/extras/ipsec/ || true
	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/ipv*/ipcomp*.ko $(PLATFORMDIR)/extras/ipsec/ || true
#	$(if $(TCONFIG_IPSEC),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/netfilter/xt_policy.ko $(PLATFORMDIR)/extras/ipsec/ || true

	$(if $(TCONFIG_SAMBASRV),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nls_cp9*.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_SAMBASRV),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nls_cp1251.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_SAMBASRV),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nls_euc-jp.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_SAMBASRV),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nls_sjis.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_SAMBASRV),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nls_gb2312.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_SAMBASRV),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nls_euc-kr.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_SAMBASRV),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/nls_big5.*o $(PLATFORMDIR)/extras/ || true

ifneq ($(TCONFIG_BCMARM),y)
	$(if $(TCONFIG_USB),@cp -f,$(if $(TCONFIG_SDHC),@cp -f,@mv)) $(TARGETDIR)/lib/modules/*/kernel/fs/nls_*.*o $(PLATFORMDIR)/extras/ || true
endif
	$(if $(TCONFIG_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/usb/*.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/scsi/*.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/leds/*.*o $(PLATFORMDIR)/extras/ || true
ifneq ($(TCONFIG_BCMARM),y)
	$(if $(TCONFIG_USB),@cp -f,$(if $(TCONFIG_SDHC),@cp -f,@mv)) $(TARGETDIR)/lib/modules/*/kernel/fs/ext2.*o $(PLATFORMDIR)/extras/ || true
endif
	$(if $(TCONFIG_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/ext3.*o $(PLATFORMDIR)/extras/ || true
ifneq ($(TCONFIG_BCMARM),y)
	$(if $(TCONFIG_USB),@cp -f,$(if $(TCONFIG_SDHC),@cp -f,@mv)) $(TARGETDIR)/lib/modules/*/kernel/fs/jbd.*o $(PLATFORMDIR)/extras/ || true
endif
	$(if $(TCONFIG_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/mbcache.*o $(PLATFORMDIR)/extras/ || true
ifneq ($(TCONFIG_BCMARM),y)
	$(if $(TCONFIG_USB),@cp -f,$(if $(TCONFIG_SDHC),@cp -f,@mv)) $(TARGETDIR)/lib/modules/*/kernel/fs/fat.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_USB),@cp -f,$(if $(TCONFIG_SDHC),@cp -f,@mv)) $(TARGETDIR)/lib/modules/*/kernel/fs/vfat.*o $(PLATFORMDIR)/extras/ || true
else
	$(if $(TCONFIG_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/exfat.*o $(PLATFORMDIR)/extras/ || true
endif
	$(if $(TCONFIG_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/msdos.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_USB),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/fuse.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_HFS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/hfs.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_HFS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/hfsplus.*o $(PLATFORMDIR)/extras/ || true

ifneq ($(TCONFIG_USB),y)
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/drivers/usb || true
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/drivers/scsi || true
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/drivers/leds || true
endif

	$(if $(TCONFIG_USB_EXTRAS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/connector/cn.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_USB_EXTRAS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/drivers/block/loop.*o $(PLATFORMDIR)/extras/ || true
ifneq ($(TCONFIG_USB_EXTRAS),y)
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/drivers/connector || true
	@rm -rf $(TARGETDIR)/lib/modules/*/kernel/drivers/block || true
endif
	$(if $(TCONFIG_CIFS),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/cifs.*o $(PLATFORMDIR)/extras/ || true
	$(if $(or $(TCONFIG_BRCM_NAND_JFFS2),$(TCONFIG_JFFS2)),$(if $(TCONFIG_JFFSV1),@mv,@cp -f),@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/jffs2.*o $(PLATFORMDIR)/extras/ || true
	$(if $(or $(TCONFIG_BRCM_NAND_JFFS2),$(TCONFIG_JFFS2)),$(if $(TCONFIG_JFFSV1),@mv,@cp -f),@mv) $(TARGETDIR)/lib/modules/*/kernel/lib/zlib_*.*o $(PLATFORMDIR)/extras/ || true
	$(if $(or $(TCONFIG_BRCM_NAND_JFFS2),$(TCONFIG_JFFS2)),$(if $(TCONFIG_JFFSV1),@cp -f,@mv),@mv) $(TARGETDIR)/lib/modules/*/kernel/fs/jffs.*o $(PLATFORMDIR)/extras/ || true
	[ ! -f $(TARGETDIR)/lib/modules/*/kernel/lib/* ] && rm -rf $(TARGETDIR)/lib/modules/*/kernel/lib || true
	$(if $(TCONFIG_L7),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/ipv4/netfilter/ipt_layer7.*o $(PLATFORMDIR)/extras/ || true
	$(if $(TCONFIG_L7),@cp -f,@mv) $(TARGETDIR)/lib/modules/*/kernel/net/netfilter/xt_layer7.*o $(PLATFORMDIR)/extras/ || true

	@mkdir -p $(PLATFORMDIR)/extras/apps
	@mkdir -p $(PLATFORMDIR)/extras/lib

	@mv $(TARGETDIR)/usr/sbin/ttcp $(PLATFORMDIR)/extras/apps/ || true
	@mv $(TARGETDIR)/usr/sbin/mii-tool $(PLATFORMDIR)/extras/apps/ || true
	@cp -r $(TARGETDIR)/usr/sbin/robocfg $(PLATFORMDIR)/extras/apps/ || true

	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/usr/lib/libusb* $(PLATFORMDIR)/extras/lib/ || true
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/usr/sbin/usb_modeswitch $(PLATFORMDIR)/extras/apps/ || true
	@cp usbmodeswitch/usb_modeswitch.conf $(PLATFORMDIR)/extras/apps/usb_modeswitch.conf || true
	@cp usbmodeswitch/usb_modeswitch.setup $(PLATFORMDIR)/extras/apps/usb_modeswitch.setup || true
	@mkdir -p $(PLATFORMDIR)/extras/apps/usb_modeswitch.d
	@cp -f usbmodeswitch/data/usb_modeswitch.d/* $(PLATFORMDIR)/extras/apps/usb_modeswitch.d || true
ifneq ($(NEED_EX_USB),y)
	@rm -rf $(TARGETDIR)/rom/etc/usb_modeswitch.d || true
	@rm -f  $(TARGETDIR)/rom/etc/usb_modeswitch.conf || true
endif
	$(if $(NEED_EX_USB),@cp -f,@mv) $(TARGETDIR)/usr/sbin/chat $(PLATFORMDIR)/extras/apps/ || true

	@mkdir -p $(TARGETDIR)/rom/etc/l7-protocols
ifeq ($(TCONFIG_L7PAT),y)
	@cd layer7 && ./squish.sh
	cp layer7/squished/*.pat $(TARGETDIR)/rom/etc/l7-protocols
endif

	busybox/examples/depmod.pl -k $(LINUXDIR)/vmlinux -b $(TARGETDIR)/lib/modules/*/
#	@mv $(TARGETDIR)/lib/modules/*/modules.dep $(TARGETDIR)/lib/modules/
	@echo ---

	@rm -f $(TARGETDIR)/lib/modules/*/build

ifneq ($(TCONFIG_BCMARM),y)
	$(MAKE) -C $(LINUXDIR)/scripts/squashfs mksquashfs-lzma
	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(TARGETDIR) $(PLATFORMDIR)/target.image -all-root -noappend -no-duplicates | tee target.info
else
image:
	$(MAKE) -C squashfs-4.2 mksquashfs
	squashfs-4.2/mksquashfs $(TARGETDIR) $(PLATFORMDIR)/$(ROOT_IMG) -noappend -all-root
endif

#	Package kernel and filesystem
#	if grep -q "CONFIG_EMBEDDED_RAMDISK=y" $(LINUXDIR)/.config ; then \
#	    cp $(PLATFORMDIR)/target.image $(LINUXDIR)/arch/mips/ramdisk/$${CONFIG_EMBEDDED_RAMDISK_IMAGE} ; \
#	    $(MAKE) -C $(LINUXDIR) zImage ; \
#	else \
#	    cp $(LINUXDIR)/arch/mips/brcm-boards/bcm947xx/compressed/vmlinuz $(PLATFORMDIR)/ ; \
#	    trx -o $(PLATFORMDIR)/linux.trx $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.image ; \
#	fi

# 	Pad self-booting Linux to a 64 KB boundary
#	cp $(LINUXDIR)/arch/mips/brcm-boards/bcm947xx/compressed/zImage $(PLATFORMDIR)/
#	dd conv=sync bs=64k < $(PLATFORMDIR)/zImage > $(PLATFORMDIR)/linux.bin
# 	Append filesystem to self-booting Linux
#	cat $(PLATFORMDIR)/target.image >> $(PLATFORMDIR)/linux.bin

libc:	$(LIBDIR)/ld-uClibc.so.0
#	$(MAKE) -C ../../../tools-src/uClibc all
#	$(MAKE) -C ../../../tools-src/uClibc install


#
# cleaners
#


clean: clean-build $(obj-clean)
	@rm -rf layer7/squished
	@rm -f .ipv6-y .ipv6-n
	@make -C config clean

clean-build: dummy
	@rm -rf $(TARGETDIR)
	@rm -rf $(INSTALLDIR)
	@rm -f $(PLATFORMDIR)/linux.trx $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.image
	@rm -rf $(PLATFORMDIR)/extras

distclean: clean
ifneq ($(INSIDE_MAK),1)
	@$(MAKE) -C $(SRCBASE) $@ INSIDE_MAK=1
endif
#	-rm -f $(LIBDIR)/*.so.0  $(LIBDIR)/*.so


#
# configuration
#


CONFIG_IN := config/config.in

config/conf config/mconf:
	@$(MAKE) -C config

rconf: config/conf
	@config/conf $(CONFIG_IN)

rmconf: config/mconf
	@config/mconf $(CONFIG_IN)

roldconf: config/conf
	@config/conf -o $(CONFIG_IN)
	@$(MAKE) shared-clean rc-clean nvram$(BCMEX)-clean httpd-clean prebuilt-clean libbcmcrypto-clean dhcpv6-clean
	@$(MAKE) dnsmasq-clean iproute2-clean
ifeq ($(TCONFIG_BCMARM),y)
	@$(MAKE) compressed-clean
endif
ifeq ($(TCONFIG_DHDAP),y)
ifeq ($(TCONFIG_BCM7),y)
ifneq ($(wildcard $(SRCBASE_FW)/wl/sys),)
ifeq ($(wildcard /opt/hndtools-armeabi-2011.09),)
	# build 43602 src and to match its path
	sudo rm -rf /opt/hndtools-armeabi-2011.09
	sudo ln -sf $(SRCBASE)/toolchains/hndtools-armeabi-2011.09 /opt/hndtools-armeabi-2011.09
endif
endif
endif
endif

kconf:
	@$(MAKE) -C $(LINUXDIR) config

kmconf:
	@$(MAKE) -C $(LINUXDIR) menuconfig

koldconf:
	@$(MAKE) -C $(LINUXDIR) oldconfig
	@$(MAKE) -C $(LINUXDIR) include/linux/version.h

bboldconf:
	@$(MAKE) -C busybox oldconfig

config conf: rconf kconf

menuconfig mconf: rmconf kmconf

.ipv6-y .ipv6-n:
	@rm -f .ipv6-y .ipv6-n
	@$(MAKE) $(IPTABLES_TARGET)-clean ebtables-clean pppd-clean $(if $(TCONFIG_BCMARM),,zebra-clean) dnsmasq-clean $(IPROUTE_TARGET)-clean
	@touch $@

dependconf: .ipv6-$(if $(TCONFIG_IPV6),y,n)

oldconfig oldconf: koldconf roldconf dependconf bboldconf


#
# overrides and extra dependencies
#


ifeq ($(TCONFIG_BCM7),y)
$(obj-pciefd):
# Build PCIEFD firmware only if it is not prebuilt
ifeq ($(TCONFIG_DHDAP),y)
ifneq ($(wildcard $(SRCBASE_FW)/wl/sys),)
	+$(MAKE) CROSS_COMPILE=arm-none-eabi -C $(SRCBASE_FW)/dongle/rte/wl $(patsubst %-obj,%,$@)/$(PCIEFD_TARGET_NAME)
	if [ -f $(SRCBASE_FW)/dongle/rte/wl/builds/$(patsubst %-obj,%,$@)/$(PCIEFD_TARGET_NAME)/rtecdc_$(patsubst %-roml-obj,%,$@).h ]; then \
		cp $(SRCBASE_FW)/dongle/rte/wl/builds/$(patsubst %-obj,%,$@)/$(PCIEFD_TARGET_NAME)/rtecdc_$(patsubst %-roml-obj,%,$@).h $(SRCBASE_DHD)/shared/rtecdc_$(patsubst %-roml-obj,%,$@).h && \
		echo "#include <rtecdc_$(patsubst %-roml-obj,%,$@).h>" >> $(PCIEFD_EMBED_HEADER); \
	fi;
	if [ -f $(SRCBASE_FW)/dongle/rte/wl/builds/$(patsubst %-obj,%,$@)/$(PCIEFD_TARGET_NAME)/rtecdc_$(patsubst %-ram-obj,%,$@).h ]; then \
		cp $(SRCBASE_FW)/dongle/rte/wl/builds/$(patsubst %-obj,%,$@)/$(PCIEFD_TARGET_NAME)/rtecdc_$(patsubst %-ram-obj,%,$@).h $(SRCBASE_DHD)/shared/rtecdc_$(patsubst %-ram-obj,%,$@).h && \
		echo "#include <rtecdc_$(patsubst %-ram-obj,%,$@).h>" >> $(PCIEFD_EMBED_HEADER); \
	fi;
	if [ -f $(SRCBASE_FW)/dongle/rte/wl/builds/$(patsubst %-obj,%,$@)/$(PCIEFD_TARGET_NAME)/wlc_clm_data.c ]; then \
		cp $(SRCBASE_FW)/dongle/rte/wl/builds/$(patsubst %-obj,%,$@)/$(PCIEFD_TARGET_NAME)/wlc_clm_data.c $(SRCBASE_FW)/wl/clm/src/wlc_clm_data.c.GEN && \
		cp $(SRCBASE_FW)/dongle/rte/wl/builds/$(patsubst %-obj,%,$@)/$(PCIEFD_TARGET_NAME)/wlc_clm_data_inc.c $(SRCBASE_FW)/wl/clm/src/wlc_clm_data_inc.c.GEN; \
	fi;
endif
endif

pciefd-cleangen: pciefd-clean
# Clean PCIEFD firmware only if it is not prebuilt
ifeq ($(TCONFIG_DHDAP),y)
ifneq ($(wildcard $(SRCBASE_FW)/wl/sys),)
	rm -f  $(PCIEFD_EMBED_HEADER)
	cp -f $(PCIEFD_EMBED_HEADER_TEMPLATE) $(PCIEFD_EMBED_HEADER)
endif
endif

pciefd: pciefd-cleangen $(obj-pciefd)

pciefd-clean :
ifeq ($(TCONFIG_DHDAP),y)
ifneq ($(wildcard $(SRCBASE_FW)/wl/sys),)
	+$(MAKE) CROSS_COMPILE=arm-none-eabi -C $(SRCBASE_FW)/dongle/rte/wl clean
	rm -f $(SRCBASE_DHD)/shared/rtecdc*.h
endif
endif

pciefd-install :
	# Nothing to be done here
	@true
endif	# TCONFIG_BCM7

ifeq ($(TCONFIG_DHDAP),y)
dhd:
	@true
ifneq ($(wildcard $(SRCBASE_DHD)/dhd/exe),)
	-$(MAKE) TARGET_PREFIX=$(CROSS_COMPILE) -C $(SRCBASE_DHD)/dhd/exe
endif

dhd-clean:
ifneq ($(wildcard $(SRCBASE_DHD)/dhd/exe),)
	-$(MAKE) TARGET_PREFIX=$(CROSS_COMPILE) -C $(SRCBASE_DHD)/dhd/exe clean
	rm -f $(INSTALLDIR)/dhd/usr/sbin/dhd
	cd $(SRCBASE_DHD)/dhd/exe && rm -f `find ./ -name "*.cmd" && find ./ -name "*.o"`
endif

dhd-install:
ifneq ($(wildcard $(SRCBASE_DHD)/dhd/exe),)
	install -d $(INSTALLDIR)/dhd/usr/sbin
	install $(SRCBASE_DHD)/dhd/exe/dhd $(INSTALLDIR)/dhd/usr/sbin/dhd
	$(STRIP) $(INSTALLDIR)/dhd/usr/sbin/dhd
endif
endif	# TCONFIG_DHDAP

busybox: dummy
	@$(SEP)
	$(call patch_files,busybox)
	@$(MAKE) -C $@ EXTRA_CFLAGS="-fPIC $(EXTRACFLAGS)" $(PARALLEL_BUILD)

busybox-install:
	rm -rf $(INSTALLDIR)/busybox
	$(MAKE) -C busybox EXTRA_CFLAGS="-fPIC $(EXTRACFLAGS)" CONFIG_PREFIX=$(INSTALLDIR)/busybox install

busybox-config:
	$(MAKE) -C busybox menuconfig

busybox-clean:
	-@$(MAKE) -C busybox distclean
	$(call unpatch_files,busybox)

www-install:
	@$(MAKE) -C www INSTALLDIR=$(INSTALLDIR)/www TOMATO_EXPERIMENTAL=$(TOMATO_EXPERIMENTAL) install

cyassl/stamp-h1:
	cd cyassl && autoreconf -fsi && \
		CFLAGS="$(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC -DNO_MD4 -DNO_ERROR_STRINGS -DNO_HC128 -DNO_RABBIT -DNO_PSK -DNO_DSA -DNO_DH -DNO_PWDBASED" \
		CXXFLAGS="-Os -Wall -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		PTHREAD_LIBS="-lpthread" \
		$(CONFIGURE)
	@touch $@

cyassl: cyassl/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

cyassl-install:
	@true

cyassl-clean:
	-@$(MAKE) -C cyassl clean
	@rm -f cyassl/stamp-h1

openssl/stamp-h1:
ifeq ($(TCONFIG_BCMARM),)
ifeq ($(TCONFIG_KEYGEN),y)
	@mv patches/openssl/102-tomato-mips-specific.patch patches/openssl/102-tomato-mips-specific.patch.tmp || true
else
	@mv patches/openssl/102-tomato-mips-specific.patch.tmp patches/openssl/102-tomato-mips-specific.patch || true
endif
	$(call patch_files,openssl)
endif # !TCONFIG_BCMARM

	cd openssl && \
		CC=$(CC:$(CROSS_COMPILE)%=%) \
		AR=$(AR:$(CROSS_COMPILE)%=%) \
		NM=$(NM:$(CROSS_COMPILE)%=%) \
		RANLIB=$(RANLIB:$(CROSS_COMPILE)%=%) \
		./Configure $(HOSTCONFIG) $(EXTRACFLAGS) $(if $(TCONFIG_BCMARM),-O2,-Os) --prefix=/usr --openssldir=/etc/ssl -DOPENSSL_NO_BUF_FREELISTS \
			-ffunction-sections -fdata-sections -Wl,--gc-sections -fomit-frame-pointer \
			shared $(OPENSSL_CIPHERS)

ifeq ($(TCONFIG_BCMARM),)
	cd openssl && mkdir -p include/openssl && \
	ln -sf ../../crypto/krb5/krb5_asn.h include/openssl/krb5_asn.h
ifeq ($(TCONFIG_KEYGEN),)
	cd openssl && \
	ln -sf ../../crypto/camellia/camellia.h include/openssl/camellia.h && \
	ln -sf ../../crypto/mdc2/mdc2.h include/openssl/mdc2.h && \
	ln -sf ../../crypto/ripemd/ripemd.h include/openssl/ripemd.h && \
	ln -sf ../../crypto/seed/seed.h include/openssl/seed.h && \
	ln -sf ../../crypto/ts/ts.h include/openssl/ts.h && \
	ln -sf ../../crypto/engine/engine.h include/openssl/engine.h && \
	ln -sf ../../crypto/rsa/rsa.h include/openssl/rsa.h && \
	ln -sf ../../crypto/dh/dh.h include/openssl/dh.h && \
	ln -sf ../../crypto/idea/idea.h include/openssl/idea.h && \
	ln -sf ../../crypto/rc2/rc2.h include/openssl/rc2.h && \
	ln -sf ../../crypto/cast/cast.h include/openssl/cast.h
endif
endif # !TCONFIG_BCMARM

	@$(MAKE) -C openssl depend
	@$(MAKE) -C openssl clean
	@touch $@

openssl: openssl/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ INSTALL_PREFIX=$(TOP)/openssl/staged install_sw

openssl-install:
	install -D openssl/libcrypto.so.1.0.0 $(INSTALLDIR)/openssl/usr/lib/libcrypto.so.1.0.0
	install -D openssl/libssl.so.1.0.0 $(INSTALLDIR)/openssl/usr/lib/libssl.so.1.0.0
	$(STRIP) $(INSTALLDIR)/openssl/usr/lib/libcrypto.so.1.0.0
	$(STRIP) $(INSTALLDIR)/openssl/usr/lib/libssl.so.1.0.0
	install -D openssl/apps/openssl $(INSTALLDIR)/openssl/usr/sbin/openssl
	$(STRIP) $(INSTALLDIR)/openssl/usr/sbin/openssl
	chmod 0500 $(INSTALLDIR)/openssl/usr/sbin/openssl
	cd $(INSTALLDIR)/openssl/usr/lib && ln -sf libcrypto.so.1.0.0 libcrypto.so
	cd $(INSTALLDIR)/openssl/usr/lib && ln -sf libssl.so.1.0.0 libssl.so

openssl-clean:
	-@$(MAKE) -C openssl clean
	@rm -f openssl/stamp-h1
	@rm -rf openssl/staged
ifeq ($(TCONFIG_BCMARM),)
	@rm -rf openssl/include
	$(call unpatch_files,openssl)
endif # !TCONFIG_BCMARM

openssl-1.1/stamp-h1:
ifeq ($(TCONFIG_BCMARM),)
ifeq ($(TCONFIG_KEYGEN),y)
	@mv patches/openssl-1.1/104-reduce-size-for-smaller-targets.patch patches/openssl-1.1/104-reduce-size-for-smaller-targets.patch.tmp || true
else
	@mv patches/openssl-1.1/104-reduce-size-for-smaller-targets.patch.tmp patches/openssl-1.1/104-reduce-size-for-smaller-targets.patch || true
endif
endif # !TCONFIG_BCMARM

	$(call patch_files,openssl-1.1)
	cd openssl-1.1 && \
		CC=$(CC:$(CROSS_COMPILE)%=%) \
		AR=$(AR:$(CROSS_COMPILE)%=%) \
		NM=$(NM:$(CROSS_COMPILE)%=%) \
		RANLIB=$(RANLIB:$(CROSS_COMPILE)%=%) \
		./Configure $(HOSTCONFIG) $(EXTRACFLAGS) $(if $(TCONFIG_BCMARM),-O2,$(if $(TCONFIG_AIO),-O3,-Os)) --prefix=/usr --openssldir=/etc/ssl \
			-ffunction-sections -fdata-sections -Wl,--gc-sections -fomit-frame-pointer \
			shared $(OPENSSL_CIPHERS) --api=1.0.0 \
			no-async no-aria no-sm2 no-sm3 no-sm4 \
			-DOPENSSL_PREFER_CHACHA_OVER_GCM
	@$(MAKE) -C openssl-1.1 clean
	@touch $@

openssl-1.1: openssl-1.1/stamp-h1
	$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/openssl-1.1/staged install_sw

openssl-1.1-install:
	install -D openssl-1.1/libcrypto.so.1.1 $(INSTALLDIR)/openssl-1.1/usr/lib/libcrypto.so.1.1
	install -D openssl-1.1/libssl.so.1.1 $(INSTALLDIR)/openssl-1.1/usr/lib/libssl.so.1.1
	$(STRIP) $(INSTALLDIR)/openssl-1.1/usr/lib/libssl.so.1.1
	$(STRIP) $(INSTALLDIR)/openssl-1.1/usr/lib/libcrypto.so.1.1
	install -D openssl-1.1/apps/openssl $(INSTALLDIR)/openssl-1.1/usr/sbin/openssl11
	$(STRIP) $(INSTALLDIR)/openssl-1.1/usr/sbin/openssl11
	chmod 0500 $(INSTALLDIR)/openssl-1.1/usr/sbin/openssl11
	cd $(INSTALLDIR)/openssl-1.1/usr/lib && ln -sf libcrypto.so.1.1 libcrypto.so
	cd $(INSTALLDIR)/openssl-1.1/usr/lib && ln -sf libssl.so.1.1 libssl.so
	cd $(INSTALLDIR)/openssl-1.1/usr/sbin && ln -sf openssl11 openssl

openssl-1.1-clean:
	-@$(MAKE) -C openssl-1.1 clean
	@rm -f openssl-1.1/stamp-h1
	@rm -rf openssl-1.1/staged
	$(call unpatch_files,openssl-1.1)

bridge/Makefile:
	cd bridge && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix='' --with-linux-headers=$(LINUXDIR)/include

bridge: bridge/Makefile
	@$(SEP)
	@$(MAKE) -C $@

bridge-install:
	install -D bridge/brctl/brctl $(INSTALLDIR)/bridge/usr/sbin/brctl
	$(STRIP) $(INSTALLDIR)/bridge/usr/sbin/brctl

bridge-clean:
	-@$(MAKE) -C bridge clean
	@rm -f bridge/Makefile

gmp/stamp-h1:
	$(call patch_files,gmp)
	cd gmp && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		$(CONFIGURE)
	@touch $@

gmp: gmp/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

gmp-install:
	@true

gmp-clean:
	-@$(MAKE) -C gmp clean
	@rm -f gmp/stamp-h1
	$(call unpatch_files,gmp)

nettle/stamp-h1:
ifneq ($(TCONFIG_BCMARM),y)
	$(call patch_files,nettle)
endif
	cd nettle && \
		CFLAGS="$(if $(TCONFIG_BCMARM),-O2,-Os) -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		CPPFLAGS="-I$(TOP)/gmp -fPIC" \
		LDFLAGS="-L$(TOP)/gmp/.libs -ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		$(CONFIGURE) --prefix=$(TOP)/nettle --enable-mini-gmp --disable-documentation --disable-shared --disable-openssl --disable-fat
	@touch $@

nettle: nettle/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)
	@$(MAKE) -C $@ install

nettle-clean:
	-@$(MAKE) -C nettle clean
	@rm -f nettle/stamp-h1
	@rm -rf nettle/include nettle/lib nettle/bin nettle/share
ifneq ($(TCONFIG_BCMARM),y)
	$(call unpatch_files,nettle)
endif

dnsmasq:
	@$(SEP)
	$(call patch_files,dnsmasq)
	$(MAKE) -C dnsmasq $(PARALLEL_BUILD) \
	COPTS="-DHAVE_BROKEN_RTC -DHAVE_TOMATO -DNO_DUMPFILE -DNO_ID -DNO_GMP -DUSE_IPSET $(if $(TCONFIG_OPTIMIZE_SIZE_MORE),-DNO_LOOP,) $(if $(TCONFIG_BCMARM),,-DNO_INOTIFY) \
		$(if $(TCONFIG_USB_EXTRAS),,-DNO_TFTP -DNO_SCRIPT -DNO_AUTH -DNO_INOTIFY) \
		$(if $(DNSSEC_OPENSSL),-I$(TOP)/$(OPENSSLDIR)/staged/usr/include -DHAVE_DNSSEC,) \
		$(if $(DNSSEC_NETTLE),-I$(TOP)/nettle/include -I$(TOP)/gmp -DHAVE_DNSSEC -DHAVE_DNSSEC_STATIC -DNO_GOST,) \
		$(if $(TCONFIG_IPV6),-DUSE_IPV6,-DNO_IPV6)" \
	CFLAGS="-Os -Wall -ffunction-sections -fdata-sections $(EXTRACFLAGS) -std=gnu99 $(OPTSIZE_MORE_FLAG)" \
	LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections \
		$(if $(DNSSEC_OPENSSL),-pthread -L$(TOP)/$(OPENSSLDIR)/staged/usr/lib,) \
		$(if $(DNSSEC_NETTLE),-L$(TOP)/nettle/lib -L$(TOP)/gmp/.libs,)" \
	$(if $(DNSSEC_OPENSSL),PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/$(OPENSSLDIR)/staged/usr/lib" CRYPTO=openssl,) \
	$(if $(DNSSEC_NETTLE),PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/nettle/lib/pkgconfig",)

dnsmasq-install:
	install -D dnsmasq/src/dnsmasq $(INSTALLDIR)/dnsmasq/usr/sbin/dnsmasq
	$(STRIP) $(INSTALLDIR)/dnsmasq/usr/sbin/dnsmasq

dnsmasq-clean:
	-@$(MAKE) -C dnsmasq clean
	$(call unpatch_files,dnsmasq)

iptables:
	@$(SEP)
	$(call patch_files,iptables)
	cp -f iptables/extensions/libipt_ipp2p_K26.c iptables/extensions/libipt_ipp2p.c
	$(MAKE) -C $@ BINDIR=/usr/sbin LIBDIR=/usr/lib KERNEL_DIR=$(LINUXDIR) COPT_FLAGS="-Os $(EXTRACFLAGS) -U CONFIG_NVRAM_SIZE $(OPTSIZE_FLAG)" $(PARALLEL_BUILD)

iptables-install:
	install -D iptables/iptables $(INSTALLDIR)/iptables/usr/sbin/iptables
	cd $(INSTALLDIR)/iptables/usr/sbin && ln -sf iptables iptables-restore && ln -sf iptables iptables-save
	install -d $(INSTALLDIR)/iptables/usr/lib/iptables
	install -D iptables/extensions/*.so $(INSTALLDIR)/iptables/usr/lib/iptables/
	install -D iptables/libiptc.so $(INSTALLDIR)/iptables/usr/lib/libiptc.so
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables
	$(STRIP) $(INSTALLDIR)/iptables/usr/lib/iptables/*.so
	$(STRIP) $(INSTALLDIR)/iptables/usr/lib/libiptc.so
ifeq ($(TCONFIG_IPV6),y)
	install iptables/ip6tables $(INSTALLDIR)/iptables/usr/sbin/ip6tables
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/ip6tables
	cd $(INSTALLDIR)/iptables/usr/sbin && \
		ln -sf ip6tables ip6tables-restore && \
		ln -sf ip6tables ip6tables-save
endif

iptables-clean:
	-@$(MAKE) -C iptables KERNEL_DIR=$(LINUXDIR) clean
	$(call unpatch_files,iptables)

iptables-1.8.x/stamp-h1:
	$(call patch_files,iptables-1.8.x)
	cd iptables-1.8.x && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -U CONFIG_NVRAM_SIZE" \
		CPPFLAGS="-Os -Wall -I$(TOP)/libnfnetlink/include $(if $(TCONFIG_CONNTRACK_TOOL),-I$(TOP)/libnetfilter_conntrack/include,)" \
		LDFLAGS="-L$(TOP)/libnfnetlink/src/.libs -lnfnetlink $(if $(TCONFIG_CONNTRACK_TOOL),-L$(TOP)/libnetfilter_conntrack/src/.libs,)" \
		PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/libnfnetlink$(if $(TCONFIG_CONNTRACK_TOOL),:$(TOP)/libnetfilter_conntrack,)" \
		$(CONFIGURE) --prefix=/usr --bindir=/usr/sbin --libdir=/usr/lib \
			$(if $(TCONFIG_IPV6),--enable-ipv6,--disable-ipv6) \
			--with-kernel=$(LINUXDIR) --disable-nftables \
			--with-xt-lock-name=/var/lock/xtables.lock
	@touch $@

iptables-1.8.x: iptables-1.8.x/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)

iptables-1.8.x-install:
	install -D iptables-1.8.x/iptables/.libs/xtables-legacy-multi $(INSTALLDIR)/iptables-1.8.x/usr/sbin/xtables-legacy-multi
	cd $(INSTALLDIR)/iptables-1.8.x/usr/sbin && \
		ln -sf xtables-legacy-multi iptables-legacy-restore && \
		ln -sf xtables-legacy-multi iptables-legacy-save && \
		ln -sf xtables-legacy-multi iptables-legacy && \
		ln -sf xtables-legacy-multi iptables-restore && \
		ln -sf xtables-legacy-multi iptables-save && \
		ln -sf xtables-legacy-multi iptables
	install -d $(INSTALLDIR)/iptables-1.8.x/usr/lib/xtables
	install -D iptables-1.8.x/libiptc/.libs/lib*.so $(INSTALLDIR)/iptables-1.8.x/usr/lib/
	cd $(INSTALLDIR)/iptables-1.8.x/usr/lib && \
		ln -sf libip4tc.so libip4tc.so.2 && \
		ln -sf libip4tc.so libip4tc.so.2.0.0 && \
		ln -sf libip6tc.so libip6tc.so.2 && \
		ln -sf libip6tc.so libip6tc.so.2.0.0
	install -D iptables-1.8.x/libxtables/.libs/lib*.so $(INSTALLDIR)/iptables-1.8.x/usr/lib/
	cd $(INSTALLDIR)/iptables-1.8.x/usr/lib && \
		ln -sf libxtables.so libxtables.so.12 && \
		ln -sf libxtables.so libxtables.so.12.2.0
	install -D iptables-1.8.x/extensions/*.so $(INSTALLDIR)/iptables-1.8.x/usr/lib/xtables
ifeq ($(TCONFIG_IPV6),y)
	cd $(INSTALLDIR)/iptables-1.8.x/usr/sbin && \
		ln -sf xtables-legacy-multi ip6tables-legacy-restore && \
		ln -sf xtables-legacy-multi ip6tables-legacy-save && \
		ln -sf xtables-legacy-multi ip6tables-legacy && \
		ln -sf xtables-legacy-multi ip6tables-restore && \
		ln -sf xtables-legacy-multi ip6tables-save && \
		ln -sf xtables-legacy-multi ip6tables
endif
	$(STRIP) $(INSTALLDIR)/iptables-1.8.x/usr/sbin/xtables-legacy-multi
	$(STRIP) $(INSTALLDIR)/iptables-1.8.x/usr/lib/*.so*
	$(STRIP) $(INSTALLDIR)/iptables-1.8.x/usr/lib/xtables/*.so*

iptables-1.8.x-clean:
	-@$(MAKE) -C iptables-1.8.x KERNEL_DIR=$(LINUXDIR) distclean
	@rm -f iptables-1.8.x/stamp-h1
	$(call unpatch_files,iptables-1.8.x)

rp-pppoe/src/stamp-h1: rp-pppoe/src/Makefile.in
	$(call patch_files,rp-pppoe)
	cd rp-pppoe/src && \
		CFLAGS="$(if $(TCONFIG_BCMARM),-O2,-Os) -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		CPPFLAGS="-Os -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --enable-plugin=$(TOP)/pppd --disable-debugging \
			ac_cv_linux_kernel_pppoe=yes rpppoe_cv_pack_bitfields=rev ac_cv_path_PPPD=$(TOP)/pppd
	@touch $@

rp-pppoe: rp-pppoe/src/stamp-h1
	@$(SEP)
	$(MAKE) -C rp-pppoe/src pppoe-relay rp-pppoe.so $(PARALLEL_BUILD)

rp-pppoe-install:
	install -D rp-pppoe/src/rp-pppoe.so $(INSTALLDIR)/rp-pppoe/usr/lib/pppd/rp-pppoe.so
	$(STRIP) $(INSTALLDIR)/rp-pppoe/usr/lib/pppd/*.so
#	install -D rp-pppoe/src/pppoe-relay $(INSTALLDIR)/rp-pppoe/usr/sbin/pppoe-relay
#	$(STRIP) $(INSTALLDIR)/rp-pppoe/usr/sbin/pppoe-relay

rp-pppoe-clean:
	-@$(MAKE) -C rp-pppoe/src clean
	@rm -f rp-pppoe/src/pppoe-relay
	@rm -f rp-pppoe/src/stamp-h1
	$(call unpatch_files,rp-pppoe)

libnfnetlink/stamp-h1:
	cd libnfnetlink $(if $(TCONFIG_BCMARM),&& ./autogen.sh,) && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --enable-shared --enable-static
	@touch $@

libnfnetlink: libnfnetlink/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	@rm -f libnfnetlink/src/libnfnetlink.la

libnfnetlink-install:
	install -D libnfnetlink/src/.libs/libnfnetlink.so.0.2.0 $(INSTALLDIR)/libnfnetlink/usr/lib/libnfnetlink.so.0.2.0
	$(STRIP) -s $(INSTALLDIR)/libnfnetlink/usr/lib/libnfnetlink.so.0.2.0
	cd $(INSTALLDIR)/libnfnetlink/usr/lib/ && \
		ln -sf libnfnetlink.so.0.2.0 libnfnetlink.so.0 && \
		ln -sf libnfnetlink.so.0.2.0 libnfnetlink.so

libnfnetlink-clean:
	-@$(MAKE) -C libnfnetlink distclean
	@rm -f libnfnetlink/stamp-h1

miniupnpd/stamp-h1:
	$(call patch_files,miniupnpd)
	cd miniupnpd && \
		./configure --leasefile --vendorcfg --portinuse $(if $(TCONFIG_IPV6),--ipv6,) --iptablespath=$(TOP)/$(IPTABLES_TARGET)
	@touch $@

miniupnpd: miniupnpd/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD) \
		EXTRACFLAGS="-Os $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -Wl,--as-needed $(if $(TCONFIG_HTTPS),-L$(TOP)/$(OPENSSLDIR)/staged/usr/lib -pthread) \
			$(if $(TCONFIG_BCMARM),-L$(TOP)/shared,-Wl$(comma)--allow-multiple-definition)"

miniupnpd-install:
	install -D miniupnpd/miniupnpd $(INSTALLDIR)/miniupnpd/usr/sbin/miniupnpd
	$(STRIP) $(INSTALLDIR)/miniupnpd/usr/sbin/miniupnpd

miniupnpd-clean:
	-@$(MAKE) -C miniupnpd clean
	@rm -f miniupnpd/config.h
	@rm -f miniupnpd/stamp-h1
	$(call unpatch_files,miniupnpd)

vsftpd:
	@$(SEP)
	$(call patch_files,vsftpd)
	$(MAKE) -C vsftpd $(PARALLEL_BUILD)

vsftpd-install:
	install -D vsftpd/vsftpd $(INSTALLDIR)/vsftpd/usr/sbin/vsftpd
	$(STRIP) -s $(INSTALLDIR)/vsftpd/usr/sbin/vsftpd

vsftpd-clean:
	$(call unpatch_files,vsftpd)

ufsd: kernel_header kernel
	@$(MAKE) -C $@ all

ufsd-install: ufsd
	@$(MAKE) -C ufsd install INSTALLDIR=$(INSTALLDIR)/ufsd

ntfs-3g/Makefile:
	$(call patch_files,ntfs-3g)
	cd ntfs-3g && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC $(OPTSIZE_FLAG)" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		$(CONFIGURE) --enable-shared=no --enable-static=no \
			--disable-library --disable-ldconfig --disable-mount-helper --with-fuse=internal \
			--disable-ntfsprogs --disable-crypto --without-uuid \
			--disable-posix-acls --disable-nfconv --disable-dependency-tracking

ntfs-3g: ntfs-3g/Makefile
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

ntfs-3g-install:
	install -D ntfs-3g/src/ntfs-3g $(INSTALLDIR)/ntfs-3g/bin/ntfs-3g
	$(STRIP) -s $(INSTALLDIR)/ntfs-3g/bin/ntfs-3g
	install -d $(INSTALLDIR)/ntfs-3g/sbin && cd $(INSTALLDIR)/ntfs-3g/sbin && \
		ln -sf ../bin/ntfs-3g mount.ntfs-3g && \
		ln -sf ../bin/ntfs-3g mount.ntfs

ntfs-3g-clean:
	-@$(MAKE) -C ntfs-3g clean
	@rm -f ntfs-3g/Makefile
	$(call unpatch_files,ntfs-3g)

libusb10/Makefile: libusb10/Makefile.in
	cd libusb10 && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		LIBS="-lpthread" \
		$(CONFIGURE) --prefix=/usr --disable-udev ac_cv_lib_rt_clock_gettime=no

libusb10: libusb10/Makefile
	@$(SEP)
	$(MAKE) -C $@

libusb10-install:
	install -D libusb10/libusb/.libs/libusb-1.0.so $(INSTALLDIR)/libusb10/usr/lib/libusb-1.0.so
	$(STRIP) $(INSTALLDIR)/libusb10/usr/lib/*.so
	cd $(INSTALLDIR)/libusb10/usr/lib && ln -sf libusb-1.0.so libusb-1.0.so.0

libusb10-clean:
	-@$(MAKE) -C $@ clean
	@rm -rf libusb10/Makefile

usbmodeswitch:
	@$(SEP)
	$(MAKE) -C $@ \
		CFLAGS="-Os $(EXTRACFLAGS) -DLIBUSB10 -Wl,-R/lib:/usr/lib:/opt/usr/lib -I$(TOP)/libusb10/libusb" \
		LDFLAGS="-L$(TOP)/libusb10/libusb/.libs" \
		LIBS="-lpthread -lusb-1.0"
	# install db
	@mkdir -p $(TARGETDIR)/rom/etc/usb_modeswitch.d
	# compress whitespace
	@for D in $(wildcard $(TOP)/usbmodeswitch/data/usb_modeswitch.d/*); do \
		F=`basename $$D`; \
		sed 's/###.*//g;s/[ \t]\+/ /g;s/^[ \t]*//;s/[ \t]*$$//;/^$$/d' < $$D > $(TARGETDIR)/rom/etc/usb_modeswitch.d/$$F; \
	done

usbmodeswitch-install:
	install -D usbmodeswitch/usb_modeswitch $(INSTALLDIR)/usbmodeswitch/usr/sbin/usb_modeswitch
	$(STRIP) -s $(INSTALLDIR)/usbmodeswitch/usr/sbin/usb_modeswitch
	@mkdir -p $(TARGETDIR)/rom/etc
	@sed 's/#.*//g;s/[ \t]\+/ /g;s/^[ \t]*//;s/[ \t]*$$//;/^$$/d' < $(TOP)/usbmodeswitch/usb_modeswitch.conf > $(TARGETDIR)/rom/etc/usb_modeswitch.conf

dhcpv6/stamp-h1:
	@cd dhcpv6 && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -D_GNU_SOURCE -ffunction-sections -fdata-sections -I$(SRCBASE)/include -DTOMATO" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -L$(TOP)/nvram$(BCMEX) -lnvram $(if $(TCONFIG_BCMARM),,-L$(TOP)/shared -lshared)" \
		ac_cv_func_setpgrp_void=yes \
		$(CONFIGURE) --prefix= --with-localdbdir=/var
	@$(MAKE) -C dhcpv6 clean
	@touch $@

dhcpv6: dhcpv6/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ dhcp6c $(PARALLEL_BUILD)

dhcpv6-install:
	install -D dhcpv6/dhcp6c $(INSTALLDIR)/dhcpv6/usr/sbin/dhcp6c
	$(STRIP) $(INSTALLDIR)/dhcpv6/usr/sbin/dhcp6c

dhcpv6-clean:
	-@$(MAKE) -C dhcpv6 clean
	@rm -f dhcpv6/Makefile dhcpv6/stamp-h1

wsdd2:
	$(call patch_files,wsdd2)
	@$(SEP)
	@$(MAKE) CFLAGS="-Os -Wall -std=gnu99 $(EXTRACFLAGS) -ffunction-sections -fdata-sections -DTOMATO -I$(TOP)/shared" LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" -C $@

wsdd2-install:
	install -D wsdd2/wsdd2 $(INSTALLDIR)/wsdd2/usr/sbin/wsdd2
	$(STRIP) $(INSTALLDIR)/wsdd2/usr/sbin/wsdd2

wsdd2-clean:
	@$(MAKE) -C wsdd2 clean
	$(call unpatch_files,wsdd2)

accel-pptp/Makefile: accel-pptp/Makefile.in $(LINUXDIR)/include/linux/version.h
	$(call patch_files,accel-pptp)
	cd accel-pptp && \
		CFLAGS="-g -O2 $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		CPPFLAGS="-O2 -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr KDIR=$(LINUXDIR) PPPDIR=$(TOP)/pppd

accel-pptp: accel-pptp/Makefile
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

accel-pptp-install:
	install -D accel-pptp/src/.libs/pptp.so $(INSTALLDIR)/accel-pptp/usr/lib/pppd/pptp.so
	$(STRIP) $(INSTALLDIR)/accel-pptp/usr/lib/pppd/pptp.so

accel-pptp-clean:
	-@$(MAKE) -C accel-pptp clean
	@rm -f accel-pptp/Makefile
	$(call unpatch_files,accel-pptp)

pptpd/stamp-h1:
	$(call patch_files,pptpd)
	ln -sf ../../pppd/pppd/ pptpd/plugins/pppd
	cd pptpd && \
		$(CONFIGURE) --prefix=$(INSTALLDIR)/pptpd --enable-bcrelay
	touch $@

pptpd: pptpd/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

pptpd-install:
	@install -D pptpd/pptpd $(INSTALLDIR)/pptpd/usr/sbin/pptpd
	@install -D pptpd/bcrelay $(INSTALLDIR)/pptpd/usr/sbin/bcrelay
	@install -D pptpd/pptpctrl $(INSTALLDIR)/pptpd/usr/sbin/pptpctrl
	@$(STRIP) $(INSTALLDIR)/pptpd/usr/sbin/*

pptpd-clean:
	-@$(MAKE) -C pptpd clean
	@rm -rf pptpd/stamp-h1 pptpd/.deps
	@rm -f pptpd/plugins/pppd
	$(call unpatch_files,pptpd)

pppd/Makefile: pppd/linux/Makefile.top
	$(call patch_files,pppd)
	cd pppd && \
		$(CONFIGURE) --prefix=/usr --sysconfdir=/tmp

pppd: pppd/Makefile
	@$(SEP)
	@$(MAKE) -C $@ MFLAGS='$(if $(TCONFIG_IPV6),HAVE_INET6=y,) $(if $(TCONFIG_HTTPS),,USE_CRYPT=y) EXTRACFLAGS="$(EXTRACFLAGS) $(OPTSIZE_MORE_FLAG)"' $(PARALLEL_BUILD)

pppd-install:
	install -D pppd/pppd/pppd $(INSTALLDIR)/pppd/usr/sbin/pppd
	$(STRIP) $(INSTALLDIR)/pppd/usr/sbin/pppd
	install -D pppd/chat/chat $(INSTALLDIR)/pppd/usr/sbin/chat
	$(STRIP) $(INSTALLDIR)/pppd/usr/sbin/chat
ifeq ($(TCONFIG_L2TP),y)
	install -D pppd/pppd/plugins/pppol2tp/pppol2tp.so $(INSTALLDIR)/pppd/usr/lib/pppd/pppol2tp.so
	$(STRIP) $(INSTALLDIR)/pppd/usr/lib/pppd/*.so
endif

pppd-clean:
	-@$(MAKE) -C pppd clean
	@rm -f pppd/Makefile
	$(call unpatch_files,pppd)

zebra/stamp-h1:
	@cd zebra && rm -f config.cache && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		$(CONFIGURE) --sysconfdir=/etc --enable-netlink $(if $(TCONFIG_IPV6),--enable-ipv6,--disable-ipv6) --disable-ripngd \
			--disable-ospfd --disable-ospf6d --disable-bgpd --disable-bgp-announce --disable-dependency-tracking
	@touch $@

zebra: zebra/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@

zebra-install:
	install -D zebra/zebra/zebra $(INSTALLDIR)/zebra/usr/sbin/zebra
	install -D zebra/ripd/ripd $(INSTALLDIR)/zebra/usr/sbin/ripd
	install -D zebra/lib/libzebra.so $(INSTALLDIR)/zebra/usr/lib/libzebra.so
	$(STRIP) $(INSTALLDIR)/zebra/usr/sbin/zebra
	$(STRIP) $(INSTALLDIR)/zebra/usr/sbin/ripd
	$(STRIP) $(INSTALLDIR)/zebra/usr/lib/libzebra.so

zebra-clean:
	-@$(MAKE) -C zebra clean
	@rm -f zebra/stamp-h1

xl2tpd:
	@$(SEP)
	$(call patch_files,xl2tpd)
	CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC $(OPTSIZE_FLAG)" \
	LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
	$(MAKE) -C $@ PREFIX=/usr xl2tpd $(PARALLEL_BUILD)

xl2tpd-install:
	install -D xl2tpd/xl2tpd $(INSTALLDIR)/xl2tpd/usr/sbin/xl2tpd
	$(STRIP) $(INSTALLDIR)/xl2tpd/usr/sbin/xl2tpd

xl2tpd-clean:
	-@$(MAKE) -C xl2tpd clean
	$(call unpatch_files,xl2tpd)

libbcm:
	@$(SEP)
	@[ ! -f libbcm/Makefile ] || $(MAKE) -C libbcm

libbcm-install:
	install -D libbcm/libbcm.so $(INSTALLDIR)/libbcm/usr/lib/libbcm.so
	$(STRIP) $(INSTALLDIR)/libbcm/usr/lib/libbcm.so

iproute2:
	@$(SEP)
	$(call patch_files,iproute2)
	@$(MAKE) -C $@ KERNEL_INCLUDE=$(LINUXDIR)/include \
		EXTRACFLAGS="$(EXTRACFLAGS) -ffunction-sections -fdata-sections $(if $(TCONFIG_IPV6),-DUSE_IPV6,-DNO_IPV6) $(OPTSIZE_FLAG)" \
		PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/$(IPTABLES_TARGET)/iptables" \
		$(PARALLEL_BUILD)

iproute2-install:
	install -D iproute2/tc/tc $(INSTALLDIR)/iproute2/usr/sbin/tc
	$(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/tc
	install -D iproute2/ip/ip $(INSTALLDIR)/iproute2/usr/sbin/ip
	$(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/ip

iproute2-clean:
	-@$(MAKE) -C iproute2 clean
	$(call unpatch_files,iproute2)

iproute2-3.x: kernel_header
	@$(SEP)
	$(call patch_files,iproute2-3.x)
	@$(MAKE) -C $@ KERNEL_INCLUDE=$(LINUXDIR)/include \
		EXTRACFLAGS="$(EXTRACFLAGS)" \
		PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/$(IPTABLES_TARGET)/iptables" \
		$(PARALLEL_BUILD)

iproute2-3.x-install:
	install -D iproute2-3.x/tc/tc $(INSTALLDIR)/iproute2-3.x/usr/sbin/tc
	$(STRIP) $(INSTALLDIR)/iproute2-3.x/usr/sbin/tc
	install -D iproute2-3.x/ip/ip $(INSTALLDIR)/iproute2-3.x/usr/sbin/ip
	$(STRIP) $(INSTALLDIR)/iproute2-3.x/usr/sbin/ip
	@if [ -e iproute2-3.x/tc/m_xt.so ] ; then \
		install -D iproute2-3.x/tc/m_xt.so $(INSTALLDIR)/iproute2-3.x/usr/lib/tc/m_xt.so ; \
		ln -sf m_xt.so $(INSTALLDIR)/iproute2-3.x/usr/lib/tc/m_ipt.so ; \
		$(STRIP) $(INSTALLDIR)/iproute2-3.x/usr/lib/tc/*.so ; \
	fi

iproute2-3.x-clean:
	-@$(MAKE) -C iproute2-3.x clean
	-rm -f iproute2-3.x/Config
	$(call unpatch_files,iproute2-3.x)

dropbear/config.h:
	$(call patch_files,dropbear)
	cd dropbear && autoreconf -fsi && \
		CFLAGS="$(if $(TCONFIG_BCMARM),-O2,-Os) -Wall $(EXTRACFLAGS) -DARGTYPE=3 -ffunction-sections -fdata-sections $(OPTSIZE_MORE_FLAG)" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		ac_cv_func_logout=no ac_cv_func_logwtmp=no \
		$(CONFIGURE) --disable-zlib --enable-syslog --disable-lastlog --disable-utmp \
			--disable-utmpx --disable-wtmp --disable-wtmpx --disable-pututline --disable-pututxline \
			--disable-loginfunc --disable-pam --enable-openpty --enable-bundled-libtom
	@$(MAKE) -C dropbear clean

dropbear: dropbear/config.h
	@$(SEP)
ifneq ($(TCONFIG_ZEBRA)$(TCONFIG_BCMARM),)
	@$(MAKE) -C $@ PROGRAMS="dropbear dbclient dropbearkey scp" MULTI=1 $(PARALLEL_BUILD)
else
	@$(MAKE) -C $@ PROGRAMS="dropbear dropbearkey $(if $(TCONFIG_OPTIMIZE_SIZE),,scp)" MULTI=1 $(PARALLEL_BUILD)
endif

dropbear-install:
	install -D dropbear/dropbearmulti $(INSTALLDIR)/dropbear/usr/bin/dropbearmulti
	$(STRIP) $(INSTALLDIR)/dropbear/usr/bin/dropbearmulti
	cd $(INSTALLDIR)/dropbear/usr/bin && \
	ln -sf dropbearmulti dropbear && \
	ln -sf dropbearmulti dropbearkey && \
	ln -sf dropbearmulti dbclient && \
	ln -sf dropbearmulti ssh && \
	ln -sf dropbearmulti scp

dropbear-clean:
	-@$(MAKE) -C dropbear clean
	@rm -f dropbear/config.h
	$(call unpatch_files,dropbear)

sqlite/stamp-h1:
	cd sqlite && autoreconf -fsi && \
		CC=$(CC) CFLAGS="-Os $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --enable-shared --enable-static \
			--disable-readline --disable-dynamic-extensions --enable-threadsafe
	@touch $@

sqlite: sqlite/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ all $(PARALLEL_BUILD)

sqlite-install:
ifeq ($(INSTALL_SQLITE),y)
	install -D sqlite/.libs/libsqlite3.so.0.8.6 $(INSTALLDIR)/sqlite/usr/lib/libsqlite3.so.0.8.6
	$(STRIP) $(INSTALLDIR)/sqlite/usr/lib/libsqlite3.so.0.8.6
	cd $(INSTALLDIR)/sqlite/usr/lib/ && \
		ln -sf libsqlite3.so.0.8.6 libsqlite3.so.0 && \
		ln -sf libsqlite3.so.0.8.6 libsqlite3.so
endif
	@true

sqlite-clean:
	-@$(MAKE) -C sqlite clean
	@rm -f sqlite/stamp-h1

ffmpeg/stamp-h1:
ifneq ($(TCONFIG_BCMARM),y)
	$(call patch_files,ffmpeg)
endif
	cd ffmpeg && symver_asm_label=no symver_gnu_asm=no symver=no \
		./configure --prefix='' --enable-cross-compile --arch=$(ARCH) --target_os=linux \
		--cross-prefix=$(CROSS_COMPILE) --enable-shared --enable-gpl --disable-doc \
		--enable-pthreads --enable-small --disable-ffmpeg --disable-ffplay \
		--disable-ffserver --disable-ffprobe --disable-avdevice --disable-swscale \
		--disable-network --disable-mpegaudio-hp \
		$(if $(TCONFIG_BCMARM),--disable-muxers --disable-devices --disable-encoders --disable-filters --disable-hwaccels --disable-bsfs,--disable-avfilter --disable-postproc --disable-dxva2 --disable-altivec --disable-everything) \
		$(if $(TCONFIG_BCMARM),--enable-demuxers,--disable-demuxers) $(FFMPEG_CONFIGURE_DEMUXERS) \
		--disable-decoders $(FFMPEG_CONFIGURE_DECODERS) \
		--disable-parsers $(FFMPEG_CONFIGURE_PARSERS) \
		--disable-protocols $(FFMPEG_CONFIGURE_PROTOCOLS) \
		--extra-cflags="-Os $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC -I$(TOP)/zlib/staged/usr/include $(OPTSIZE_FLAG)" \
		--extra-ldflags="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		--extra-libs="-L$(TOP)/zlib/staged/usr/lib -lz" \
		--enable-zlib --disable-debug
	@touch $@

ffmpeg: ffmpeg/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ all $(PARALLEL_BUILD)

ffmpeg-install:
ifneq ($(MEDIA_SERVER_STATIC),y)
	install -D ffmpeg/libavformat/libavformat.so.52 $(INSTALLDIR)/ffmpeg/usr/lib/libavformat.so.52
	install -D ffmpeg/libavcodec/libavcodec.so.52 $(INSTALLDIR)/ffmpeg/usr/lib/libavcodec.so.52
	install -D ffmpeg/libavutil/libavutil.so.50 $(INSTALLDIR)/ffmpeg/usr/lib/libavutil.so.50
	$(STRIP) $(INSTALLDIR)/ffmpeg/usr/lib/libavformat.so.52
	$(STRIP) $(INSTALLDIR)/ffmpeg/usr/lib/libavcodec.so.52
	$(STRIP) $(INSTALLDIR)/ffmpeg/usr/lib/libavutil.so.50
endif
	@true

ffmpeg-clean:
	-@$(MAKE) -C ffmpeg clean
	@rm -f ffmpeg/stamp-h1 ffmpeg/config.h ffmpeg/config.mak
ifneq ($(TCONFIG_BCMARM),y)
	$(call unpatch_files,ffmpeg)
endif

libogg/stamp-h1:
	cd libogg && autoreconf -fsi && \
		CFLAGS="-Os $(EXTRACFLAGS) -fPIC -ffunction-sections -fdata-sections" \
		LDFLAGS="-fPIC -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix='' --enable-shared --enable-static
	@touch $@

libogg: libogg/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ all $(PARALLEL_BUILD)

libogg-install:
ifneq ($(MEDIA_SERVER_STATIC),y)
	install -D libogg/src/.libs/libogg.so.0 $(INSTALLDIR)/libogg/usr/lib/libogg.so.0
	$(STRIP) $(INSTALLDIR)/libogg/usr/lib/libogg.so.0
endif
	@true

libogg-clean:
	-@$(MAKE) -C libogg clean
	@rm -f libogg/stamp-h1

flac/stamp-h1:
	$(call patch_files,flac)
	cd flac && autoreconf -fsi && \
		CFLAGS="-Os $(EXTRACFLAGS) -fPIC -ffunction-sections -fdata-sections" \
		CPPFLAGS="-I$(TOP)/libogg/include -I$(LINUXDIR)/include -fPIC" \
		LDFLAGS="-L$(TOP)/libogg/src/.libs -fPIC -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix='' --enable-shared --enable-static --disable-rpath \
			--disable-doxygen-docs --disable-xmms-plugin --disable-cpplibs --disable-thorough-tests \
			--without-libiconv-prefix --disable-altivec --disable-sse --disable-dependency-tracking \
			--with-ogg=$(TOP)/libogg/src/.libs
	@touch $@

flac: flac/stamp-h1
	@$(SEP)
	@$(MAKE) -C flac/src/libFLAC all $(PARALLEL_BUILD)

flac-install:
ifneq ($(MEDIA_SERVER_STATIC),y)
	install -D flac/src/libFLAC/.libs/libFLAC.so.8 $(INSTALLDIR)/flac/usr/lib/libFLAC.so.8
	$(STRIP) $(INSTALLDIR)/flac/usr/lib/libFLAC.so.8
endif
	@true

flac-clean:
	-@$(MAKE) -C flac clean
	@rm -f flac/stamp-h1
	$(call unpatch_files,flac)

jpeg/stamp-h1:
	cd jpeg && \
		CFLAGS="-Os $(EXTRACFLAGS) -fPIC -ffunction-sections -fdata-sections" \
		LDFLAGS="-fPIC -ffunction-sections -fdata-sections" \
		AR2="touch" \
		$(CONFIGURE) --prefix='' --enable-shared --enable-static
	@touch $@

jpeg: jpeg/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ LIBTOOL="" O=o A=a CC=$(CC) AR2="touch" libjpeg.a libjpeg.so $(PARALLEL_BUILD)
	install -d $(TOP)/jpeg/staged/include
	install -d $(TOP)/jpeg/staged/lib
	install -d $(TOP)/jpeg/staged/bin
	install -d $(TOP)/jpeg/staged/man/man1
	@$(MAKE) -C $@ LIBTOOL="" prefix=$(TOP)/jpeg/staged install
	install -D jpeg/libjpeg.so $(TOP)/jpeg/staged/lib/libjpeg.so
	rm -f $(TOP)/jpeg/staged/lib/libjpeg.la

jpeg-install:
ifneq ($(MEDIA_SERVER_STATIC),y)
	install -D jpeg/libjpeg.so $(INSTALLDIR)/jpeg/usr/lib/libjpeg.so
	$(STRIP) $(INSTALLDIR)/jpeg/usr/lib/libjpeg.so
endif
ifeq ($(TCONFIG_NGINX),y)
	install -D jpeg/libjpeg.so $(INSTALLDIR)/jpeg/usr/lib/libjpeg.so
	$(STRIP) $(INSTALLDIR)/jpeg/usr/lib/libjpeg.so
endif
	@true

jpeg-clean:
	-@$(MAKE) -C jpeg clean
	@rm -f jpeg/stamp-h1 jpeg/Makefile
	@rm -rf jpeg/staged

libexif/stamp-h1:
	cd libexif && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -std=gnu99 -fPIC -ffunction-sections -fdata-sections" \
		LDFLAGS="-fPIC -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix='' --enable-shared --enable-static \
			--disable-docs --disable-rpath --disable-nls --without-libiconv-prefix --without-libintl-prefix
	@touch $@

libexif: libexif/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ all $(PARALLEL_BUILD)

libexif-install:
ifneq ($(MEDIA_SERVER_STATIC),y)
	install -D libexif/libexif/.libs/libexif.so.12 $(INSTALLDIR)/libexif/usr/lib/libexif.so.12
	$(STRIP) $(INSTALLDIR)/libexif/usr/lib/libexif.so.12
endif
	@true

libexif-clean:
	-@$(MAKE) -C libexif clean
	@rm -f libexif/stamp-h1

zlib/stamp-h1:
	cd zlib && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -fPIC -ffunction-sections -fdata-sections" \
		CPPLAGS="-Os -Wall -fPIC -ffunction-sections -fdata-sections" \
		LDFLAGS="-fPIC -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		LDSHAREDLIBC="$(EXTRALDFLAGS)" \
		./configure --prefix=/usr --shared --libdir=/usr/lib
	@touch $@

zlib: zlib/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ all $(PARALLEL_BUILD)
	@$(MAKE) -C $@ DESTDIR=$(TOP)/zlib/staged install

zlib-install:
ifeq ($(INSTALL_ZLIB),y)
	install -d $(INSTALLDIR)/zlib/usr/lib
	install -D zlib/libz.so.1 $(INSTALLDIR)/zlib/usr/lib/
	$(STRIP) $(INSTALLDIR)/zlib/usr/lib/libz.so.1
endif
	@true

zlib-clean:
	-@$(MAKE) -C zlib clean
	@rm -f zlib/stamp-h1 zlib/Makefile zlib/zconf.h zlib/zlib.pc
	@rm -rf zlib/staged

libid3tag/stamp-h1:
	$(call patch_files,libid3tag)
	cd libid3tag $(if $(TCONFIG_BCMARM),,&& autoreconf -fsi) && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		CPPFLAGS="-Os -Wall -ffunction-sections -fdata-sections -fPIC -I$(TOP)/zlib/staged/usr/include" \
		LDFLAGS="-L$(TOP)/zlib/staged/usr/lib -fPIC -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix='' --enable-shared --enable-static \
			--disable-debugging --disable-profiling --disable-dependency-tracking
	@touch $@

libid3tag: libid3tag/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ all $(PARALLEL_BUILD)

libid3tag-install:
ifneq ($(MEDIA_SERVER_STATIC),y)
	install -D libid3tag/.libs/libid3tag.so.0 $(INSTALLDIR)/libid3tag/usr/lib/libid3tag.so.0
	$(STRIP) $(INSTALLDIR)/libid3tag/usr/lib/libid3tag.so.0
endif
	@true

libid3tag-clean:
	-@$(MAKE) -C libid3tag clean
	@rm -f libid3tag/stamp-h1
	$(call unpatch_files,libid3tag)

libvorbis/stamp-h1:
	cd libvorbis && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -fPIC -ffunction-sections -fdata-sections" \
		CPPFLAGS="-I$(TOP)/libogg/include -fPIC" \
		LDFLAGS="-L$(TOP)/libogg/src/.libs -fPIC -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix='' --enable-shared --enable-static --disable-oggtest \
			--with-ogg-includes="$(TOP)/libogg/include" \
			--with-ogg-libraries="$(TOP)/libogg/src/.libs"
	@touch $@

libvorbis: libvorbis/stamp-h1
	@$(SEP)
	@$(MAKE) -C libvorbis/lib all $(PARALLEL_BUILD)

libvorbis-install:
ifneq ($(MEDIA_SERVER_STATIC),y)
	install -D libvorbis/lib/.libs/libvorbis.so.0 $(INSTALLDIR)/libvorbis/usr/lib/libvorbis.so.0
	$(STRIP) $(INSTALLDIR)/libvorbis/usr/lib/libvorbis.so.0
endif
	@true

libvorbis-clean:
	-@$(MAKE) -C libvorbis clean
	@rm -f libvorbis/stamp-h1

minidlna/stamp-h1:
	$(call patch_files,minidlna)
	cd minidlna && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -fPIC -ffunction-sections -fdata-sections" \
		CPPFLAGS="-I$(TOP)/ffmpeg/libavutil -I$(TOP)/ffmpeg/libavcodec -I$(TOP)/ffmpeg/libavformat -I$(TOP)/ffmpeg/libswscale -I$(TOP)/ffmpeg -I$(TOP)/flac/include \
			-I$(TOP)/sqlite -I$(TOP)/jpeg -I$(TOP)/libexif -I$(TOP)/libid3tag -I$(TOP)/libogg/include -I$(TOP)/libvorbis/include -I$(TOP)/zlib/staged/usr/include -I$(TOP)/shared" \
		LDFLAGS="-Wl,--gc-sections -ffunction-sections -fdata-sections -L$(TOP)/libvorbis/lib/.libs -L$(TOP)/libogg/src/.libs -L$(TOP)/sqlite/.libs -L$(TOP)/libexif/libexif/.libs \
			-L$(TOP)/jpeg -L$(TOP)/flac/src/libFLAC/.libs -L$(TOP)/libid3tag/.libs -L$(TOP)/zlib/staged/usr/lib -L$(TOP)/ffmpeg/libavformat -L$(TOP)/ffmpeg/libavcodec -L$(TOP)/ffmpeg/libavutil" \
		LIBS="-lvorbis -logg -lsqlite3 -lexif -ljpeg -lFLAC -lid3tag -lz -lavformat -lavcodec -lavutil -lpthread -lm" \
		ac_cv_lib_id3tag__lz___id3_file_open=yes \
		ac_cv_lib_avformat__lavcodec__lavutil__lz_avformat_open_input=no \
		ac_cv_lib_avformat__lavcodec__lavutil__lz___av_open_input_file=yes \
		ac_cv_header_stddef_h=no \
		ac_cv_header_stdlib_h=no \
		ac_cv_func_getifaddrs=yes \
		$(CONFIGURE) --prefix=/usr --libdir=/usr/lib --with-db-path=/tmp/minidlna --with-log-path=/var/log --with-os-name="FreshTomato" --with-os-url="https://freshtomato.org/" \
			--with-os-version="Linux/2.6.$(if $(TCONFIG_BCMARM),36$(comma)4brcmarm,22$(comma)19)" $(if $(MEDIA_SERVER_STATIC),--enable-static,) --enable-tivo --disable-dependency-tracking
	@touch $@

minidlna: minidlna/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(if $(MEDIA_SERVER_STATIC),STATIC=1,) $(PARALLEL_BUILD)

minidlna-install:
	install -D minidlna/minidlnad $(INSTALLDIR)/minidlna/usr/sbin/minidlna
	$(STRIP) $(INSTALLDIR)/minidlna/usr/sbin/minidlna

minidlna-clean:
	-@$(MAKE) -C minidlna clean
	@rm -f minidlna/stamp-h1
	$(call unpatch_files,minidlna)

igmpproxy/src/Makefile: igmpproxy/src/Makefile.in
ifneq ($(TCONFIG_BCMARM),y)
	$(call patch_files,igmpproxy)
endif
	cd igmpproxy && autoreconf -fsi && \
		$(CONFIGURE) --prefix=/usr

igmpproxy: igmpproxy/src/Makefile
	@$(SEP)
	@$(MAKE) -C igmpproxy/src \
		CFLAGS="$(if $(TCONFIG_BCMARM),-O3,-Os) -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections $(OPTSIZE_FLAG)" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(PARALLEL_BUILD)

igmpproxy-install:
	install -D igmpproxy/src/igmpproxy $(INSTALLDIR)/igmpproxy/usr/sbin/igmpproxy
	$(STRIP) $(INSTALLDIR)/igmpproxy/usr/sbin/igmpproxy

igmpproxy-clean:
	-@$(MAKE) -C igmpproxy/src clean
	@rm -f igmpproxy/src/Makefile
ifneq ($(TCONFIG_BCMARM),y)
	$(call unpatch_files,igmpproxy)
endif

hotplug2:
	@$(SEP)
	$(MAKE) -C $@ \
		EXTRACFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections"

hotplug2-install:
	$(MAKE) -C hotplug2 PREFIX=$(INSTALLDIR)/hotplug2 SUBDIRS="" install
	$(MAKE) -C hotplug2/examples PREFIX=$(INSTALLDIR)/hotplug2/rom KERNELVER=$(LINUX_KERNEL) install

emf$(BCMEX):
	$(MAKE) -C $(if $(TCONFIG_BCMARM),,$(SRCBASE)/)emf$(BCMEX)/emfconf CROSS=$(CROSS_COMPILE)

emf$(BCMEX)-install:
ifeq ($(TCONFIG_EMF),y)
	install -d $(TARGETDIR)
	$(MAKE) -C $(if $(TCONFIG_BCMARM),,$(SRCBASE)/)emf$(BCMEX)/emfconf CROSS=$(CROSS_COMPILE) INSTALLDIR=$(INSTALLDIR) install
endif

emf$(BCMEX)-clean:
	-@$(MAKE) -C $(if $(TCONFIG_BCMARM),,$(SRCBASE)/)emf$(BCMEX)/emfconf clean

igs$(BCMEX):
	$(MAKE) -C $(if $(TCONFIG_BCMARM),,$(SRCBASE)/)emf$(BCMEX)/igsconf CROSS=$(CROSS_COMPILE)

igs$(BCMEX)-install:
ifeq ($(TCONFIG_EMF),y)
	install -d $(TARGETDIR)
	$(MAKE) -C $(if $(TCONFIG_BCMARM),,$(SRCBASE)/)emf$(BCMEX)/igsconf CROSS=$(CROSS_COMPILE) INSTALLDIR=$(INSTALLDIR) install
endif

igs$(BCMEX)-clean:
	-@$(MAKE) -C $(if $(TCONFIG_BCMARM),,$(SRCBASE)/)emf$(BCMEX)/igsconf clean

wanuptime:
	@$(SEP)
	@$(MAKE) -C $@

wanuptime-install:
	install -D wanuptime/wanuptime $(INSTALLDIR)/wanuptime/usr/sbin/wanuptime
	$(STRIP) $(INSTALLDIR)/wanuptime/usr/sbin/wanuptime

wanuptime-clean:
	-@$(MAKE) -C wanuptime clean

ebtables/stamp-h1: dummy
ifeq ($(TCONFIG_IPV6),y)
	mv patches/ebtables/104-do-not-build-ipv6-extension.patch patches/ebtables/104-do-not-build-ipv6-extension.patch.tmp || true
else
	mv patches/ebtables/104-do-not-build-ipv6-extension.patch.tmp patches/ebtables/104-do-not-build-ipv6-extension.patch || true
endif
	$(call patch_files,ebtables)
	cd ebtables && ./autogen.sh && \
		$(CONFIGURE) --prefix=/usr --bindir=/usr/sbin --sysconfdir=/etc --libdir=/usr/lib \
			CFLAGS="-Os $(EXTRACFLAGS) $(if $(TCONFIG_BCMARM),,-DEBT_MIN_ALIGN=4 -D_GNU_SOURCE) -ffunction-sections -fdata-sections -fPIC $(OPTSIZE_FLAG)" \
			LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
			LOCKFILE="/var/lock/ebtables"
	@touch $@

ebtables: ebtables/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@

ebtables-install:
	@mkdir -p $(TARGETDIR)/rom/etc
	@sed 's/#.*//g;s/[ \t]\+/ /g;s/^[ \t]*//;s/[ \t]*$$//;/^$$/d' < $(TOP)/ebtables/ethertypes > $(TARGETDIR)/rom/etc/ethertypes
	chmod 0644 $(TARGETDIR)/rom/etc/ethertypes
	install -D ebtables/.libs/ebtables-legacy $(INSTALLDIR)/ebtables/usr/sbin/ebtables-legacy
	install -D ebtables/.libs/libebtc.so.0.0.0 $(INSTALLDIR)/ebtables/usr/lib/libebtc.so.0.0.0
	$(STRIP) $(INSTALLDIR)/ebtables/usr/sbin/ebtables-legacy
	$(STRIP) $(INSTALLDIR)/ebtables/usr/lib/libebtc.so.0.0.0
	cd $(INSTALLDIR)/ebtables/usr/sbin/ && ln -sf ebtables-legacy ebtables
	cd $(INSTALLDIR)/ebtables/usr/lib/ && ln -sf libebtc.so.0.0.0 libebtc.so && ln -sf libebtc.so.0.0.0 libebtc.so.0

ebtables-clean:
	-@$(MAKE) -C ebtables clean
	rm -f ebtables/stamp-h1
	$(call unpatch_files,ebtables)

spawn-fcgi/stamp-h1:
	$(call patch_files,spawn-fcgi)
	cd spawn-fcgi && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		ac_cv_func_malloc_0_nonnull=yes \
		$(CONFIGURE) --prefix=/usr
	@touch $@

spawn-fcgi: spawn-fcgi/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@

spawn-fcgi-install:
	install -D spawn-fcgi/src/spawn-fcgi $(INSTALLDIR)/spawn-fcgi/usr/bin/spawn-fcgi
	$(STRIP) -s $(INSTALLDIR)/spawn-fcgi/usr/bin/spawn-fcgi

spawn-fcgi-clean:
	-@$(MAKE) -C spawn-fcgi clean
	@rm -f spawn-fcgi/stamp-h1
	$(call unpatch_files,spawn-fcgi)

glib/stamp-h1:
ifneq ($(TCONFIG_BCMARM),y)
	$(call patch_files,glib)
endif
	cd glib && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC $(OPTSIZE_FLAG)" \
		LDFLAGS="-Wl,--gc-sections -fPIC" \
		$(CONFIGURE) --prefix=/usr --enable-debug=no --enable-static=no --disable-dependency-tracking \
			glib_cv_prog_cc_ansi_proto=no glib_cv_has__inline=yes glib_cv_has__inline__=yes glib_cv_hasinline=yes \
			glib_cv_sane_realloc=yes glib_cv_va_copy=no glib_cv___va_copy=yes glib_cv_va_val_copy=yes glib_cv_rtldglobal_broken=no \
			glib_cv_uscore=no glib_cv_func_pthread_mutex_trylock_posix=yes glib_cv_func_pthread_cond_timedwait_posix=yes glib_cv_sizeof_gmutex=24 \
			glib_cv_byte_contents_gmutex="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" glib_cv_sys_pthread_getspecific_posix=yes \
			glib_cv_sys_pthread_mutex_trylock_posix=yes glib_cv_sys_pthread_cond_timedwait_posix=yes ac_cv_func_getpwuid_r=yes ac_cv_func_getpwuid_r_posix=yes
	@touch $@

glib: glib/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)
	@$(MAKE) -C $@ DESTDIR=$(INSTALLDIR)/glib install

glib-install:
	@true

glib-clean:
	-@$(MAKE) -C glib clean
	@rm -f glib/stamp-h1
ifneq ($(TCONFIG_BCMARM),y)
	$(call unpatch_files,glib)
endif

nocat/stamp-h1:
	cd nocat && \
		NC_CONF_PATH="/" \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		$(CONFIGURE) --with-firewall=iptables --with-glib-prefix="$(INSTALLDIR)/glib/usr" --localstatedir=/var --sysconfdir=/etc
	@touch $@

nocat: nocat/stamp-h1
	@$(SEP)
	@echo --- Integrate glib to nocat installdir ---
	install -D glib/.libs/libglib-1.2.so.0.0.10 $(INSTALLDIR)/nocat/usr/lib/libglib-1.2.so.0.0.10
	cd $(INSTALLDIR)/nocat/usr/lib && ln -s libglib-1.2.so.0.0.10 libglib-1.2.so.0
	$(STRIP) $(INSTALLDIR)/nocat/usr/lib/libglib-1.2.so.0.0.10
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

nocat-install:
	install -D nocat/src/splashd $(INSTALLDIR)/nocat/usr/sbin/splashd
	$(STRIP) $(INSTALLDIR)/nocat/usr/sbin/splashd
	mkdir -p $(INSTALLDIR)/nocat/usr/libexec/nocat
	install -D nocat/libexec/iptables/* $(INSTALLDIR)/nocat/usr/libexec/nocat
	-@rm -rf $(INSTALLDIR)/glib

nocat-clean:
	-@$(MAKE) -C nocat clean
	@rm -f nocat/stamp-h1

pcre/stamp-h1:
	$(call patch_files,pcre)
	cd pcre && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		$(CONFIGURE) --prefix=/usr --disable-dependency-tracking --enable-utf8 --enable-unicode-properties --disable-cpp
	[ -d pcre/m4 ] || mkdir pcre/m4
	@touch $@

pcre: pcre/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

pcre-install:
	install -D pcre/.libs/libpcre.so.1 $(INSTALLDIR)/pcre/usr/lib/libpcre.so.1.2.12
	$(STRIP) -s $(INSTALLDIR)/pcre/usr/lib/libpcre.so.1.2.12
	cd $(INSTALLDIR)/pcre/usr/lib/ && \
		ln -sf libpcre.so.1.2.12 libpcre.so.1
ifeq ($(TCONFIG_BCMARM),y)
	install -D pcre/.libs/libpcreposix.so.0.0.7 $(INSTALLDIR)/pcre/usr/lib/libpcreposix.so.0.0.7
	$(STRIP) -s $(INSTALLDIR)/pcre/usr/lib/libpcreposix.so.0.0.7
	cd $(INSTALLDIR)/pcre/usr/lib/ && \
		ln -sf libpcreposix.so.0.0.7 libpcreposix.so.0
endif

pcre-clean:
	-@$(MAKE) -C pcre clean
	@rm -f pcre/stamp-h1
	$(call unpatch_files,pcre)

libxml2/stamp-h1:
	cd libxml2 && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -fPIC" \
		$(CONFIGURE) --prefix=/usr --without-python --enable-static --enable-shared --with-zlib="$(TOP)/zlib/staged/usr" \
			--includedir="$(TOP)/libxml2/include" --without-lzma --disable-dependency-tracking
	@touch $@

libxml2: libxml2/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ all $(PARALLEL_BUILD)
	@$(MAKE) -C $@ DESTDIR=$(TOP)/libxml2/staged install

libxml2-install:
	install -D libxml2/.libs/libxml2.so.2.9.12 $(INSTALLDIR)/libxml2/usr/lib/libxml2.so.2.9.12
	$(STRIP) $(INSTALLDIR)/libxml2/usr/lib/libxml2.so.2.9.12
	cd $(INSTALLDIR)/libxml2/usr/lib && \
		ln -sf libxml2.so.2.9.12 libxml2.so.2 && \
		ln -sf libxml2.so.2.9.12 libxml2.so

libxml2-clean:
	-@$(MAKE) -C libxml2 clean
	@rm -f libxml2/stamp-h1
	@rm -rf libxml2/staged

libpng/stamp-h1:
	cd libpng && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		CPPFLAGS="-I$(TOP)/zlib/staged/usr/include" \
		LDFLAGS="-L$(TOP)/zlib/staged/usr/lib" \
		$(CONFIGURE) --prefix=/usr --enable-static --enable-shared
	@touch $@

libpng: libpng/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ all $(PARALLEL_BUILD)
	@$(MAKE) -C $@ DESTDIR=$(TOP)/libpng/staged install
	@rm -f $(TOP)/libpng/staged/usr/lib/libpng.la
	@rm -f $(TOP)/libpng/staged/usr/lib/libpng12.la

libpng-install:
	install -D libpng/.libs/libpng16.so.16.37.0 $(INSTALLDIR)/libpng/usr/lib/libpng16.so.16.37.0
	$(STRIP) $(INSTALLDIR)/libpng/usr/lib/libpng16.so.16.37.0
	cd $(INSTALLDIR)/libpng/usr/lib && \
		ln -sf libpng16.so.16.37.0 libpng16.so && \
		ln -sf libpng16.so.16.37.0 libpng16.so.16

libpng-clean:
	-@$(MAKE) -C libpng clean
	@rm -f libpng/stamp-h1
	@rm -rf libpng/staged

$(PHP_TARGET)/stamp-h1:
	$(call patch_files,$(PHP_TARGET))
	cd $(PHP_TARGET) && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -I$(TOP)/zlib/staged/usr/include -I$(TOP)/libxml2/include/libxml -I$(TOP)/libxml2/include -I$(TOP)/pcre -I$(TOP)/libiconv/staged/usr/include \
			-I$(TOP)/libpng/staged/usr/include -I$(TOP)/libcurl/staged/usr/include" \
		LDFLAGS="-L$(TOP)/pcre/.libs -L$(TOP)/sqlite/.libs -L$(TOP)/zlib/staged/usr/lib -L$(TOP)/libxml2/.libs -L$(TOP)/libiconv/staged/usr/lib \
			-L$(TOP)/libpng/.libs -L$(TOP)/libcurl/staged/usr/lib -L$(TOP)/$(OPENSSLDIR)/staged/usr/lib" \
		CPPFLAGS="-L$(TOP)/pcre/.libs -L$(TOP)/sqlite/.libs -L$(TOP)/zlib/staged/usr/lib -L$(TOP)/libxml2/.libs -L$(TOP)/libiconv/staged/usr/lib -L$(TOP)/libpng/.libs" \
		LIBS="-L$(TOP)/pcre/.libs -L$(TOP)/sqlite/.libs -L$(TOP)/zlib/staged/usr/lib -L$(TOP)/libxml2/.libs -L$(TOP)/libiconv/staged/usr/lib -L$(TOP)/libpng/.libs -L$(TOP)/libcurl/lib/.libs -L$(TOP)/$(OPENSSLDIR)/staged/usr/lib \
			-lz -lsqlite3 -ldl -lpthread -liconv -lxml2 -lstdc++ -lcurl -lssl -lcrypto" \
		PHP_FCGI_LIBXML_DIR="$(TOP)/libxml2/staged/usr" \
		ac_cv_func_memcmp_working=yes \
		cv_php_mbstring_stdarg=yes \
		$(CONFIGURE) --prefix=/usr \
			--enable-shared \
			--disable-static \
			--disable-rpath \
			--disable-debug \
			--without-pear \
			--with-config-file-path=/etc \
			--with-config-file-scan-dir=/etc/php5 \
			--disable-short-tags \
			--with-zlib \
			--with-zlib-dir="$(TOP)/zlib/staged/usr" \
			--disable-phar \
			--enable-cli \
			--enable-cgi \
			--disable-calendar \
			--enable-ctype \
			--with-curl="$(TOP)/libcurl/staged/usr" \
			--enable-fileinfo \
			--without-gettext \
			--enable-dom \
			--enable-exif \
			--disable-ftp \
			--without-gmp \
			--with-gd \
			--with-png-dir="$(TOP)/libpng/staged/usr" \
			--with-jpeg-dir="$(TOP)/jpeg/staged" \
			--enable-hash \
			--with-iconv="$(TOP)/libiconv/staged/usr" \
			--with-iconv-dir="$(TOP)/libiconv/staged/usr" \
			--enable-json \
			--without-ldap \
			--enable-mbstring \
			--without-openssl \
			--disable-pcntl \
			--with-mysqli \
			--with-mysql-sock="/var/run/mysqld.sock" \
			--with-pdo-mysql \
			--without-pdo-pgsql \
			--with-pdo-sqlite \
			--enable-pdo \
			--without-pgsql \
			--enable-session \
			--disable-shmop \
			--enable-simplexml \
			--disable-soap \
			--disable-sockets \
			--with-sqlite3 \
			--disable-sysvmsg \
			--disable-sysvsem \
			--disable-sysvshm \
			--disable-tokenizer \
			--enable-xml \
			--enable-xmlreader \
			--enable-xmlwriter \
			--enable-zip \
			$(if $(TCONFIG_BCMARM),--without-valgrind,) \
			--with-libxml-dir="$(TOP)/libxml2/staged/usr"
	@touch $@

$(PHP_TARGET): $(PHP_TARGET)/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

$(PHP_TARGET)-install:
	install -d $(INSTALLDIR)/$(PHP_TARGET)/usr/sbin
	install -D $(PHP_TARGET)/sapi/cli/.libs/php $(INSTALLDIR)/$(PHP_TARGET)/usr/sbin/php-cli && chmod 0755 $(INSTALLDIR)/$(PHP_TARGET)/usr/sbin/php-cli
	$(STRIP) $(INSTALLDIR)/$(PHP_TARGET)/usr/sbin/php-cli
	install -D $(PHP_TARGET)/sapi/cgi/.libs/php-cgi $(INSTALLDIR)/$(PHP_TARGET)/usr/sbin/php-cgi && chmod 0755 $(INSTALLDIR)/$(PHP_TARGET)/usr/sbin/php-cgi
	cd $(INSTALLDIR)/$(PHP_TARGET)/usr/sbin && ln -sf php-cgi php-fcgi
	$(STRIP) $(INSTALLDIR)/$(PHP_TARGET)/usr/sbin/php-cgi

$(PHP_TARGET)-clean:
	-@$(MAKE) -C $(PHP_TARGET) clean
	@rm -f $(PHP_TARGET)/stamp-h1
	$(call unpatch_files,$(PHP_TARGET))

libatomic_ops/stamp-h1:
	cd libatomic_ops && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		$(CONFIGURE) --prefix=/usr --enable-static --enable-shared
	@touch $@

libatomic_ops: libatomic_ops/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

libatomic_ops-install:
	install -D libatomic_ops/src/.libs/libatomic_ops.so.1.0.3 $(INSTALLDIR)/libatomic_ops/usr/lib/libatomic_ops.so.1.0.3
	$(STRIP) $(INSTALLDIR)/libatomic_ops/usr/lib/libatomic_ops.so.1.0.3

libatomic_ops-clean:
	-@$(MAKE) -C libatomic_ops clean
	@rm -f libatomic_ops/stamp-h1

nginx/stamp-h1:
	$(call patch_files,nginx)
	cd nginx && \
		./configure --crossbuild=Linux::$(ARCH) \
			--with-cc="$(CC)" \
			--with-cc-opt="-Os -Wall $(EXTRACFLAGS) -I$(TOP)/$(OPENSSLDIR)/staged/usr/include -I$(TOP)/pcre -I$(TOP)/zlib/staged/usr/include $(if $(TCONFIG_BCMARM),,-I$(TOP)/libatomic_ops/src/$(comma)libs)" \
			--with-ld-opt="-L$(TOP)/pcre/.libs -L$(TOP)/zlib/staged/usr/lib -L$(TOP)/$(OPENSSLDIR)/staged/usr/lib $(if $(TCONFIG_BCMARM),,-L$(TOP)/libatomic_ops/src)" \
			--prefix=/usr \
			--sbin-path=/usr/sbin \
			--conf-path=/etc/nginx/nginx.conf \
			--error-log-path=/tmp/var/log/nginx/error.log \
			--http-log-path=/tmp/var/log/nginx/access.log \
			--pid-path=/tmp/var/run/nginx.pid \
			--lock-path=/tmp/var/run/nginx.lock.accept \
			--http-client-body-temp-path=/tmp/var/lib/nginx/client \
			--http-fastcgi-temp-path=/tmp/var/lib/nginx/fastcgi \
			--http-uwsgi-temp-path=/tmp/var/lib/nginx/uwsgi \
			--http-scgi-temp-path=/tmp/var/lib/nginx/scgi \
			--http-proxy-temp-path=/tmp/var/lib/nginx/proxy \
			--with-http_flv_module \
			--with-http_ssl_module \
			--with-http_gzip_static_module \
			--with-http_v2_module \
			--with-http_realip_module \
			$(if $(TCONFIG_BCMARM),,--with-libatomic=$(TOP)/libatomic_ops) \
			$(if $(TCONFIG_IPV6),--with-ipv6,)
	@touch $@

nginx: nginx/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

nginx-install:
	install -D nginx/objs/nginx $(INSTALLDIR)/nginx/usr/sbin/nginx && chmod 0755 $(INSTALLDIR)/nginx/usr/sbin/nginx
	$(STRIP) $(INSTALLDIR)/nginx/usr/sbin/nginx

nginx-clean:
	-@$(MAKE) -C nginx clean
	@rm -f nginx/stamp-h1
	$(call unpatch_files,nginx)

libncurses/stamp-h1:
	cd libncurses && \
		CFLAGS="-Os -Wall -ffunction-sections -fdata-sections -fPIC" \
		CPPFLAGS="$(EXTRACFLAGS) -Os -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		LIBS="-lstdc++" \
		$(CONFIGURE) --prefix=/usr --with-shared --with-normal --disable-debug --without-ada --without-manpages --without-progs \
			--without-tests --without-cxx --without-cxx-bindings --with-build-cppflags=-D_GNU_SOURCE
	@touch $@

libncurses: libncurses/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/libncurses/staged install

libncurses-install:
	install -d $(INSTALLDIR)/libncurses/usr/lib
	install -d $(INSTALLDIR)/libncurses/usr/share/terminfo
	install -d $(INSTALLDIR)/libncurses/usr/share/terminfo/l
	install -d $(INSTALLDIR)/libncurses/usr/share/terminfo/v
	install -d $(INSTALLDIR)/libncurses/usr/share/terminfo/x
	install -D -m 0644 libncurses/staged/usr/share/terminfo/l/linux $(INSTALLDIR)/libncurses/usr/share/terminfo/l
	install -D -m 0644 libncurses/staged/usr/share/terminfo/v/vt100 $(INSTALLDIR)/libncurses/usr/share/terminfo/v
	install -D -m 0644 libncurses/staged/usr/share/terminfo/v/vt220 $(INSTALLDIR)/libncurses/usr/share/terminfo/v
	install -D -m 0644 libncurses/staged/usr/share/terminfo/x/xterm $(INSTALLDIR)/libncurses/usr/share/terminfo/x
	install -D -m 0644 libncurses/staged/usr/share/terminfo/x/xterm-256color $(INSTALLDIR)/libncurses/usr/share/terminfo/x
	cd $(INSTALLDIR)/libncurses/usr/lib && ln -sf ../share/terminfo terminfo
	install libncurses/lib/libncurses.so.6.3 $(INSTALLDIR)/libncurses/usr/lib/libncurses.so.6
	$(STRIP) $(INSTALLDIR)/libncurses/usr/lib/libncurses.so.6
	install libncurses/lib/libpanel.so.6.3 $(INSTALLDIR)/libncurses/usr/lib/libpanel.so.6
	$(STRIP) $(INSTALLDIR)/libncurses/usr/lib/libpanel.so.6
	install libncurses/lib/libform.so.6.3 $(INSTALLDIR)/libncurses/usr/lib/libform.so.6
	$(STRIP) $(INSTALLDIR)/libncurses/usr/lib/libform.so.6
	install libncurses/lib/libmenu.so.6.3 $(INSTALLDIR)/libncurses/usr/lib/libmenu.so.6
	$(STRIP) $(INSTALLDIR)/libncurses/usr/lib/libmenu.so.6
	cd $(INSTALLDIR)/libncurses/usr/lib/ && \
		ln -sf libncurses.so.6 libncurses.so && \
		ln -sf libpanel.so.6 libpanel.so && \
		ln -sf libform.so.6 libform.so && \
		ln -sf libmenu.so.6 libmenu.so

libncurses-clean:
	-@$(MAKE) -C libncurses clean
	@rm -f libncurses/stamp-h1 libncurses/Makefile
	@rm -rf libncurses/staged

mysql/target/Makefile:
	@mkdir -p mysql/host
	cd mysql/host && \
		cmake -DWITH_SSL=system \
			-DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_C_FLAGS="" \
			-DCMAKE_CXX_FLAGS="" \
			-DCMAKE_C_COMPILER=$(CC:$(CROSS_COMPILE)%=%) \
			-DCMAKE_CXX_COMPILER=$(CXX:$(CROSS_COMPILE)%=%) \
			..
	$(MAKE) -C mysql/host comp_sql comp_err gen_lex_hash $(PARALLEL_BUILD)

	@cp -vf mysql/host/extra/comp_err mysql/host/comp_err
	@cp -vf mysql/host/sql/gen_lex_hash mysql/host/gen_lex_hash
	@cp -vf mysql/host/scripts/comp_sql mysql/host/comp_sql
	@cp -vf mysql/host/scripts/comp_sql mysql/scripts/comp_sql

	$(call patch_files,mysql)
	@mkdir -p mysql/target
	cd mysql/target && $(call CMAKE_CrossOptions, crosscompiled.cmake) && \
		cmake -DCMAKE_TOOLCHAIN_FILE=crosscompiled.cmake \
			-DCMAKE_INSTALL_PREFIX=/usr -DINSTALL_MYSQLSHAREDIR=share/mysql \
			-DCMAKE_BUILD_TYPE=$(if $(TCONFIG_BCMARM),Release,MinSizeRel) -DCMAKE_SKIP_RPATH=TRUE \
			-DCMAKE_C_FLAGS="-Wall $(EXTRACFLAGS) -fno-delete-null-pointer-checks -funit-at-a-time -ffunction-sections -fdata-sections -fPIC" \
			-DCMAKE_CXX_FLAGS="-Wall $(EXTRACFLAGS) -fno-delete-null-pointer-checks -funit-at-a-time -ffunction-sections -fdata-sections -fPIC" \
			-DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -fPIC" \
			-DDISABLE_SHARED=FALSE \
			-DHAVE_LIBPTHREAD=TRUE \
			-DWITH_DEBUG=FALSE \
			-DSTACK_DIRECTION=1 \
			-DWITH_UNIT_TESTS=FALSE \
			-DWITH_EMBEDDED_SERVER=TRUE \
			-DWITH_EXAMPLE_STORAGE_ENGINE=FALSE \
			-DWITH_PARTITION_STORAGE_ENGINE=FALSE \
			-DWITH_FEDERATED_STORAGE_ENGINE=FALSE \
			-DWITH_NDBCLUSTER_STORAGE_ENGINE=FALSE \
			-DCURSES_INCLUDE_PATH="$(TOP)/libncurses/staged/usr/include" \
			-DCURSES_LIBRARY="$(TOP)/libncurses/staged/usr/lib/libncurses.so" \
			-DWITH_ZLIB=system \
			-DZLIB_INCLUDE_DIR="$(TOP)/zlib/staged/usr/include" \
			-DZLIB_LIBRARY="$(TOP)/zlib/staged/usr/lib/libz.so" \
			-DWITH_SSL="$(TOP)/$(OPENSSLDIR)/staged/usr" \
			-DOPENSSL_INCLUDE_DIR="$(TOP)/$(OPENSSLDIR)/staged/usr/include" \
			-DOPENSSL_LIBRARY="$(TOP)/$(OPENSSLDIR)/staged/usr/lib/libssl.so" \
			-DCRYPTO_LIBRARY="$(TOP)/$(OPENSSLDIR)/staged/usr/lib/libcrypto.so" \
			..

mysql: mysql/target/Makefile
	@$(SEP)
	@$(MAKE) -C mysql/target $(PARALLEL_BUILD)
	@$(MAKE) -C mysql/target DESTDIR=$(TOP)/mysql/staged install

mysql-install:
	install -d $(INSTALLDIR)/mysql/usr/bin
	install -d $(INSTALLDIR)/mysql/usr/lib
	install -d $(INSTALLDIR)/mysql/usr/lib/plugin
	install -d $(INSTALLDIR)/mysql/usr/libexec
	install -d $(INSTALLDIR)/mysql/usr/share
	install -d $(INSTALLDIR)/mysql/usr/share/mysql
	install -D -m 755 mysql/staged/usr/bin/my_print_defaults $(INSTALLDIR)/mysql/usr/bin
	$(STRIP) $(INSTALLDIR)/mysql/usr/bin/my_print_defaults
	install -D -m 755 mysql/staged/usr/bin/myisamchk $(INSTALLDIR)/mysql/usr/bin
	$(STRIP) $(INSTALLDIR)/mysql/usr/bin/myisamchk
	install -D -m 755 mysql/staged/usr/bin/mysql $(INSTALLDIR)/mysql/usr/bin
	$(STRIP) $(INSTALLDIR)/mysql/usr/bin/mysql
	install -D -m 755 mysql/staged/usr/scripts/mysql_install_db $(INSTALLDIR)/mysql/usr/bin
	install -D -m 755 mysql/staged/usr/bin/mysqladmin $(INSTALLDIR)/mysql/usr/bin
	$(STRIP) $(INSTALLDIR)/mysql/usr/bin/mysqladmin
	install -D -m 755 mysql/staged/usr/bin/mysqldump $(INSTALLDIR)/mysql/usr/bin
	$(STRIP) $(INSTALLDIR)/mysql/usr/bin/mysqldump
	install -D -m 755 mysql/staged/usr/bin/mysqld $(INSTALLDIR)/mysql/usr/libexec
	$(STRIP) $(INSTALLDIR)/mysql/usr/libexec/mysqld
	cd $(INSTALLDIR)/mysql/usr/bin && ln -sf ../libexec/mysqld mysqld
#	install -D -m 755 mysql/staged/usr/bin/mysqld_safe $(INSTALLDIR)/mysql/usr/bin
	install -D -m 755 mysql/staged/usr/lib/libmysqlclient.so.18.0.0 $(INSTALLDIR)/mysql/usr/lib
	$(STRIP) $(INSTALLDIR)/mysql/usr/lib/libmysqlclient.so.18.0.0
	-@cd $(INSTALLDIR)/mysql/usr/lib && \
		ln -sf libmysqlclient.so.18.0.0 libmysqlclient.so.18 && \
		ln -sf libmysqlclient.so.18.0.0 libmysqlclient.so
	install -D -m 755 mysql/staged/usr/lib/libmysqlclient_r.so.18.0.0 $(INSTALLDIR)/mysql/usr/lib
	$(STRIP) $(INSTALLDIR)/mysql/usr/lib/libmysqlclient_r.so.18.0.0
	-@cd $(INSTALLDIR)/mysql/usr/lib && \
		ln -sf libmysqlclient_r.so.18.0.0 libmysqlclient_r.so.18 && \
		ln -sf libmysqlclient_r.so.18.0.0 libmysqlclient_r.so
#	-@cd $(INSTALLDIR)/mysql/usr/lib/plugin && cp -arfpu $(TOP)/mysql/staged/usr/lib/plugin/* . && \
#	rm -f *.la *.a && \
#	$(STRIP) *.so.*
	-@cd $(INSTALLDIR)/mysql/usr/share/mysql && \
	cp -arfpu $(TOP)/mysql/staged/usr/share/mysql/english . && \
	cp -arfpu $(TOP)/mysql/staged/usr/share/mysql/fill_help_tables.sql . && \
	cp -arfpu $(TOP)/mysql/staged/usr/share/mysql/mysql_system_tables.sql . && \
	cp -arfpu $(TOP)/mysql/staged/usr/share/mysql/mysql_system_tables_data.sql .

mysql-clean:
	-@$(MAKE) -C mysql clean
	@rm -f mysql/scripts/comp_sql
	@rm -rf mysql/host mysql/target
	$(call unpatch_files,mysql)

lzo/stamp-h1:
	cd lzo && \
		CFLAGS="$(if $(TCONFIG_BCMARM),-O3,$(CFLAG_OPTIMIZE)) -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		CPPFLAGS="$(if $(TCONFIG_BCMARM),-O3,$(CFLAG_OPTIMIZE)) -Wall -ffunction-sections -fdata-sections -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		$(CONFIGURE) --enable-shared --enable-static
	@touch $@

lzo: lzo/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

lzo-install:
	install -D lzo/src/.libs/liblzo2.so $(INSTALLDIR)/lzo/usr/lib/liblzo2.so.2.0.0
	$(STRIP) $(INSTALLDIR)/lzo/usr/lib/liblzo2.so.2.0.0
	cd $(INSTALLDIR)/lzo/usr/lib && \
		ln -sf liblzo2.so.2.0.0 liblzo2.so.2 && \
		ln -sf liblzo2.so.2.0.0 liblzo2.so

lzo-clean:
	-@$(MAKE) -C lzo clean
	@rm -f lzo/stamp-h1

openvpn-2.4/Makefile:
	$(call patch_files,openvpn-2.4)
	cd openvpn-2.4 && autoreconf -fsi && \
		OPENSSL_CFLAGS="-I$(TOP)/$(OPENSSLDIR)/include" \
		OPENSSL_LIBS="-L$(TOP)/$(OPENSSLDIR) -lcrypto -lssl" \
		CFLAGS="$(if $(TCONFIG_BCMARM),-O3,$(CFLAG_OPTIMIZE)) -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-L$(TOP)/$(OPENSSLDIR) $(if $(INSTALL_ZLIB),-L$(TOP)/zlib -lz,) -lpthread -ldl -L$(TOP)/lzo/src/.libs -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		CPPFLAGS="-I$(TOP)/lzo/include -I$(TOP)/$(OPENSSLDIR)/include" \
		PLUGINDIR="/lib" IPROUTE="/usr/sbin/ip" \
		$(CONFIGURE) --prefix=/usr --bindir=/usr/sbin --libdir=/usr/lib \
			--enable-management --disable-debug --disable-plugin-auth-pam --disable-plugin-down-root --disable-dependency-tracking \
			--disable-lz4 --enable-small --disable-server --enable-iproute2 ac_cv_lib_resolv_gethostbyname=no
	@touch openvpn-2.4/.conf

openvpn-2.4: openvpn-2.4/Makefile
	@$(SEP)
	@$(MAKE) -C openvpn-2.4 $(PARALLEL_BUILD)

openvpn-2.4-install:
	install -D openvpn-2.4/src/openvpn/.libs/openvpn $(INSTALLDIR)/openvpn-2.4/usr/sbin/openvpn
	$(STRIP) -s $(INSTALLDIR)/openvpn-2.4/usr/sbin/openvpn
	chmod 0500 $(INSTALLDIR)/openvpn-2.4/usr/sbin/openvpn

openvpn-2.4-clean:
	-@$(MAKE) -C openvpn-2.4 clean
	@rm -f openvpn-2.4/Makefile
	$(call unpatch_files,openvpn-2.4)

openvpn/Makefile:
	$(call patch_files,openvpn)
	cd openvpn && autoreconf -fsi && \
		OPENSSL_CFLAGS="-I$(TOP)/$(OPENSSLDIR)/staged/usr/include" \
		OPENSSL_LIBS="-L$(TOP)/$(OPENSSLDIR)/staged/usr/lib -lcrypto -lssl" \
		CFLAGS="$(if $(TCONFIG_BCMARM),-O3,$(CFLAG_OPTIMIZE)) -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-L$(TOP)/$(OPENSSLDIR)/staged/usr/lib $(if $(INSTALL_ZLIB),-L$(TOP)/zlib/staged/usr/lib -lz,) -lpthread -ldl -L$(TOP)/lzo/src/.libs -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		CPPFLAGS="-I$(TOP)/lzo/include -I$(TOP)/$(OPENSSLDIR)/staged/usr/include" \
		PLUGINDIR="/lib" IPROUTE="/usr/sbin/ip" \
		$(CONFIGURE) --prefix=/usr --bindir=/usr/sbin --libdir=/usr/lib \
			--enable-management --disable-debug --disable-plugin-auth-pam --disable-plugin-down-root --disable-dependency-tracking \
			--enable-iproute2 ac_cv_lib_resolv_gethostbyname=no
	@touch openvpn/.conf

openvpn: openvpn/Makefile
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

openvpn-install:
	install -D openvpn/src/openvpn/.libs/openvpn $(INSTALLDIR)/openvpn/usr/sbin/openvpn
	$(STRIP) -s $(INSTALLDIR)/openvpn/usr/sbin/openvpn
	chmod 0500 $(INSTALLDIR)/openvpn/usr/sbin/openvpn

openvpn-clean:
	-@$(MAKE) -C openvpn clean
	@rm -f openvpn/Makefile
	$(call unpatch_files,openvpn)

nano/stamp-h1:
	cd nano && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -I$(TOP)/libncurses/staged/usr/include -ffunction-sections -fdata-sections -fPIC" \
		CPPFLAGS="-Os -Wall $(EXTRACFLAGS) -I$(TOP)/libncurses/staged/usr/include -ffunction-sections -fdata-sections -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -L$(TOP)/libncurses/staged/usr/lib -fPIC" \
		NCURSES_LIBS="-lncurses" \
		ac_cv_lib_ncursesw_get_wch=no \
		$(CONFIGURE) --prefix=/usr --disable-nls --enable-tiny --without-libiconv-prefix --disable-utf8
	@touch $@

nano: nano/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

nano-install:
	install -d $(INSTALLDIR)/nano/usr/sbin
	install -D nano/src/nano $(INSTALLDIR)/nano/usr/sbin/nano
	$(STRIP) -s $(INSTALLDIR)/nano/usr/sbin/nano

nano-clean:
	-@$(MAKE) -C nano clean
	@rm -f nano/stamp-h1 nano/Makefile nano/src/Makefile

libcurl/stamp-h1:
	$(call patch_files,libcurl)
	cd libcurl && autoreconf -fsi && \
		CFLAGS="-Os -Wall -pipe -ffunction-sections -fdata-sections -fPIC \
			$(if $(TCONFIG_BCMARM),-fno-strict-aliasing -fno-delete-null-pointer-checks -marm,-funit-at-a-time -Wno-pointer-sign \
				$(if $(TCONFIG_MIPSR2),-march=mips32r2 -mips32r2 -mtune=mips32r2,-march=mips32 -mips32 -mtune=mips32))" \
		CPPFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC -I$(TOP)/$(OPENSSLDIR)/staged/usr/include" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC -L$(TOP)/$(OPENSSLDIR)/staged/usr/lib" \
		LIBS="-lpthread" \
		$(CONFIGURE) --prefix=/usr --bindir=/usr/sbin --libdir=/usr/lib \
			--enable-shared --enable-static --enable-cookies --enable-crypto-auth \
			--enable-nonblocking --enable-file --enable-ftp --enable-http --enable-tftp \
			$(if $(TCONFIG_IPV6),--enable-ipv6,) \
			--with-random="/dev/urandom" --with-ssl="$(TOP)/$(OPENSSLDIR)/staged/usr" --with-zlib="$(TOP)/zlib/staged/usr" \
			--disable-nls --disable-dict --disable-debug --disable-gopher --disable-threaded-resolver \
			--disable-ldap --disable-manual --disable-telnet --disable-verbose \
			--without-gnutls --without-krb4 --without-libidn2 --without-libpsl $(if $(TCONFIG_BCMARM),,--disable-tls-srp) \
			--with-linux-headers=$(LINUXDIR)/include $(CACERT)
	@touch $@

libcurl: libcurl/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)
	@$(MAKE) -C $@ DESTDIR=$(TOP)/libcurl/staged install
	@rm -f libcurl/staged/usr/lib/libcurl.la

libcurl-install:
	install -D libcurl/lib/.libs/libcurl.so.4.7.0 $(INSTALLDIR)/libcurl/usr/lib/libcurl.so.4.7.0
	$(STRIP) -s $(INSTALLDIR)/libcurl/usr/lib/libcurl.so.4.7.0
	cd $(INSTALLDIR)/libcurl/usr/lib/ && ln -sf libcurl.so.4.7.0 libcurl.so && ln -sf libcurl.so.4.7.0 libcurl.so.4
	install -D libcurl/src/.libs/curl $(INSTALLDIR)/libcurl/usr/sbin/curl
	$(STRIP) -s $(INSTALLDIR)/libcurl/usr/sbin/curl

libcurl-clean:
	-@$(MAKE) -C libcurl clean
	@rm -f libcurl/stamp-h1 libcurl/Makefile
	@rm -rf libcurl/staged
	$(call unpatch_files,libcurl)

libevent/stamp-h1:
	cd libevent && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		CPPFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC -I$(TOP)/zlib/staged/usr/include $(if $(TCONFIG_HTTPS),-I$(TOP)/$(OPENSSLDIR)/staged/usr/include,)" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC -L$(TOP)/zlib/staged/usr/lib $(if $(TCONFIG_HTTPS),-pthread -L$(TOP)/$(OPENSSLDIR)/staged/usr/lib,)" \
		$(CONFIGURE) $(if $(TCONFIG_HTTPS),,--disable-openssl) --disable-doxygen-html \
			--disable-debug-mode --disable-samples --disable-dependency-tracking
	@touch $@

libevent: libevent/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/libevent/staged install

libevent-install:
	install -d $(INSTALLDIR)/libevent/usr/lib
	install libevent/.libs/libevent-2.1.so.7.0.1 $(INSTALLDIR)/libevent/usr/lib/libevent-2.1.so.7
	$(STRIP) -s $(INSTALLDIR)/libevent/usr/lib/libevent-2.1.so.7

libevent-clean:
	-@$(MAKE) -C libevent clean
	@rm -f libevent/stamp-h1 libevent/Makefile
	@rm -rf libevent/staged

libiconv/stamp-h1:
	cd libiconv && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -fPIC" \
		$(CONFIGURE) --prefix=/usr --disable-nls --enable-static --enable-shared
	@touch $@

libiconv: libiconv/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/libiconv/staged install

libiconv-clean:
	-@$(MAKE) -C libiconv clean
	@rm -f libiconv/stamp-h1 libiconv/Makefile
	@rm -rf libiconv/staged

libiconv-install:
	install -d $(INSTALLDIR)/libiconv/usr/lib
	install libiconv/lib/.libs/libiconv.so.2.6.1 $(INSTALLDIR)/libiconv/usr/lib/libiconv.so.2.6.1
	$(STRIP) -s $(INSTALLDIR)/libiconv/usr/lib/libiconv.so.2.6.1
	cd $(INSTALLDIR)/libiconv/usr/lib/ && \
		ln -sf libiconv.so.2.6.1 libiconv.so.2 && \
		ln -sf libiconv.so.2.6.1 libiconv.so

transmission/build/Makefile:
	@rm -rf transmission/build && mkdir -p transmission/build
	$(call patch_files,transmission)
	cd transmission/build && $(call CMAKE_CrossOptions, crosscompiled.cmake) && \
		cmake -DCMAKE_TOOLCHAIN_FILE=crosscompiled.cmake \
			-DCMAKE_INSTALL_PREFIX=/usr \
			-DCMAKE_BUILD_TYPE=Release -DCMAKE_SKIP_RPATH=TRUE \
			-DCMAKE_C_FLAGS="-Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC --param large-function-growth=800 --param max-inline-insns-single=3600" \
			-DCMAKE_CXX_FLAGS="-Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC --param large-function-growth=800 --param max-inline-insns-single=3600 -fno-exceptions -fno-rtti" \
			-DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -fPIC" \
			-DENABLE_LIGHTWEIGHT=TRUE -DENABLE_UTP=TRUE -DENABLE_NLS=FALSE -DENABLE_CLI=FALSE -DENABLE_GTK=FALSE -DENABLE_TESTS=FALSE \
			-DENABLE_NLS=FALSE -DINSTALL_DOC=FALSE -DUSE_SYSTEM_UTP=FALSE -DUSE_SYSTEM_DHT=FALSE -DUSE_SYSTEM_B64=FALSE -DWITH_SYSTEMD=FALSE \
			-DCURL_INCLUDE_DIR=$(TOP)/libcurl/include \
			-DCURL_LIBRARY=$(TOP)/libcurl/lib/.libs/libcurl.so \
			-DEVENT2_INCLUDE_DIR=$(TOP)/libevent/staged/usr/local/include \
			-DEVENT2_LIBRARY=$(TOP)/libevent/staged/usr/local/lib/libevent.so \
			-DOPENSSL_INCLUDE_DIR=$(TOP)/$(OPENSSLDIR)/staged/usr/include \
			-DOPENSSL_CRYPTO_LIBRARY=$(TOP)/$(OPENSSLDIR)/staged/usr/lib/libcrypto.so \
			-DOPENSSL_SSL_LIBRARY=$(TOP)/$(OPENSSLDIR)/staged/usr/lib/libssl.so \
			-DZLIB_INCLUDE_DIR=$(TOP)/zlib/staged/usr/include \
			-DZLIB_LIBRARY=$(TOP)/zlib/staged/usr/lib/libz.so \
			-DICONV_INCLUDE_DIR="" \
			-DICONV_LIBRARY="" \
			..

transmission: transmission/build/Makefile
	@$(SEP)
	$(MAKE) -C transmission/build $(PARALLEL_BUILD)

transmission-install:
	$(MAKE) -C transmission/build DESTDIR=$(INSTALLDIR)/transmission install
	@rm -rf $(INSTALLDIR)/transmission/usr/bin/transmission-show
	@rm -rf $(INSTALLDIR)/transmission/usr/bin/transmission-edit
	@rm -rf $(INSTALLDIR)/transmission/usr/bin/transmission-create
	$(STRIP) -s $(INSTALLDIR)/transmission/usr/bin/transmission-daemon
ifneq ($(TCONFIG_TR_EXTRAS),y)
	@rm -rf $(INSTALLDIR)/transmission/usr/bin/transmission-remote
else
	$(STRIP) -s $(INSTALLDIR)/transmission/usr/bin/transmission-remote
endif

transmission-clean:
	-@$(MAKE) -C transmission clean
	@rm -rf transmission/build
	$(call unpatch_files,transmission)

libnfsidmap/stamp-h1:
	cd libnfsidmap && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		ac_cv_func_malloc_0_nonnull=yes \
		ac_cv_func_realloc_0_nonnull=yes \
		$(CONFIGURE) --prefix=/usr --enable-shared --enable-static
	@touch $@

libnfsidmap: libnfsidmap/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/libnfsidmap/staged install

libnfsidmap-install:
	@rm -f libnfsidmap/staged/usr/lib/libnfsidmap.la

libnfsidmap-clean:
	-@$(MAKE) -C libnfsidmap clean
	@rm -f libnfsidmap/stamp-h1
	@rm -rf libnfsidmap/staged

portmap:
	@$(SEP)
	$(MAKE) -C portmap CFLAGS="-Os -Wall $(EXTRACFLAGS)" NO_TCP_WRAPPER=y NO_PIE=y RPCUSER=nobody $(PARALLEL_BUILD)

portmap-install:
	install -D portmap/portmap $(INSTALLDIR)/portmap/usr/sbin/portmap
	$(STRIP) -s $(INSTALLDIR)/portmap/usr/sbin/portmap

portmap-clean:
	-@$(MAKE) -C portmap clean

e2fsprogs/stamp-h1:
	$(call patch_files,e2fsprogs)
	cd e2fsprogs && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --sysconfdir=/etc --enable-elf-shlibs --disable-tls --disable-defrag $(if $(TCONFIG_BCMARM),ac_cv_lib_pthread_sem_init=no,) \
			--disable-jbd-debug --disable-blkid-debug --disable-testio-debug --disable-backtrace --disable-e2initrd-helper \
			--disable-nls --disable-debugfs --disable-imager --disable-resizer --disable-uuidd --disable-rpath
	@touch $@

e2fsprogs: e2fsprogs/stamp-h1
	@$(SEP)
	$(MAKE) -C e2fsprogs $(PARALLEL_BUILD)

e2fsprogs-install:
	install -D e2fsprogs/e2fsck/e2fsck $(INSTALLDIR)/e2fsprogs/usr/sbin/e2fsck
	install -D e2fsprogs/misc/mke2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/mke2fs
	install -D e2fsprogs/misc/tune2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/tune2fs
ifneq ($(TCONFIG_BCMARM),y)
ifeq ($(TCONFIG_AIO),y)
	install -D e2fsprogs/misc/badblocks $(INSTALLDIR)/e2fsprogs/usr/sbin/badblocks
endif
endif
	$(STRIP) -s $(INSTALLDIR)/e2fsprogs/usr/sbin/*
	install -D e2fsprogs/lib/libblkid.so.1.0 $(INSTALLDIR)/e2fsprogs/usr/lib/libblkid.so.1.0
	install -D e2fsprogs/lib/libcom_err.so.2.1 $(INSTALLDIR)/e2fsprogs/usr/lib/libcom_err.so.2.1
	install -D e2fsprogs/lib/libe2p.so.2.3 $(INSTALLDIR)/e2fsprogs/usr/lib/libe2p.so.2.3
	install -D e2fsprogs/lib/libext2fs.so.2.4 $(INSTALLDIR)/e2fsprogs/usr/lib/libext2fs.so.2.4
	install -D e2fsprogs/lib/libuuid.so.1.2 $(INSTALLDIR)/e2fsprogs/usr/lib/libuuid.so.1.2
	$(STRIP) -s $(INSTALLDIR)/e2fsprogs/usr/lib/*.so.*
	ln -sf libblkid.so.1.0 $(INSTALLDIR)/e2fsprogs/usr/lib/libblkid.so.1
	ln -sf libcom_err.so.2.1 $(INSTALLDIR)/e2fsprogs/usr/lib/libcom_err.so.2
	ln -sf libe2p.so.2.3 $(INSTALLDIR)/e2fsprogs/usr/lib/libe2p.so.2
	ln -sf libext2fs.so.2.4 $(INSTALLDIR)/e2fsprogs/usr/lib/libext2fs.so.2
	ln -sf libuuid.so.1.2 $(INSTALLDIR)/e2fsprogs/usr/lib/libuuid.so.1
	ln -sf e2fsck $(INSTALLDIR)/e2fsprogs/usr/sbin/fsck.ext2
	ln -sf e2fsck $(INSTALLDIR)/e2fsprogs/usr/sbin/fsck.ext3
ifeq ($(TCONFIG_BCMARM),y)
	ln -sf e2fsck $(INSTALLDIR)/e2fsprogs/usr/sbin/fsck.ext4
endif
	ln -sf mke2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/mkfs.ext2
	ln -sf mke2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/mkfs.ext3
ifeq ($(TCONFIG_BCMARM),y)
	ln -sf mke2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/mkfs.ext4
endif
	install -D -m 0644 e2fsprogs/misc/mke2fs.conf $(INSTALLDIR)/rom/rom/etc/mke2fs.conf
	install -D -m 0644 e2fsprogs/e2fsck/e2fsck.conf $(INSTALLDIR)/rom/rom/etc/e2fsck.conf

e2fsprogs-clean:
	-@$(MAKE) -C e2fsprogs clean
	@rm -f e2fsprogs/stamp-h1 e2fsprogs/Makefile
	$(call unpatch_files,e2fsprogs)

nfs-utils/stamp-h1:
ifneq ($(TCONFIG_BCMARM),y)
	$(call patch_files,nfs-utils)
endif
	cd nfs-utils && ./autogen.sh && \
		CPPFLAGS="-Os $(EXTRACFLAGS)" \
		CFLAGS="-Os -Wall -fno-delete-null-pointer-checks -funit-at-a-time -pipe -ffunction-sections -fdata-sections \
			$(if $(TCONFIG_BCMARM),-marm,$(if $(TCONFIG_MIPSR2),-march=mips32r2 -mips32r2 -mtune=mips32r2,-march=mips32 -mips32 -mtune=mips32)) \
			-I$(TOP)/libevent/staged/usr/local/include \
			-I$(TOP)/libnfsidmap/staged/usr/include -ffunction-sections -fdata-sections" \
		LDFLAGS="-L$(TOP)/libevent/staged/usr/local/lib \
			-L$(TOP)/libnfsidmap/staged/usr/lib -ffunction-sections -fdata-sections -Wl,--gc-sections" \
			knfsd_cv_bsd_signals=no \
		CC_FOR_BUILD=$(CC) $(CONFIGURE) \
			--disable-gss --without-tcp-wrappers --disable-nfsv4 --disable-ipv6 --disable-uuid --disable-mount \
			--disable-tirpc --disable-dependency-tracking $(if $(TCONFIG_BCMARM),--disable-nfsv41 --disable-nfsdcltrack,)
	@touch $@

nfs-utils: nfs-utils/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)

nfs-utils-install:
	install -d $(INSTALLDIR)/nfs-utils/usr/sbin
	install -D nfs-utils/utils/nfsd/nfsd $(INSTALLDIR)/nfs-utils/usr/sbin/nfsd
	install -D nfs-utils/utils/showmount/showmount $(INSTALLDIR)/nfs-utils/usr/sbin/showmount
	install -D nfs-utils/utils/exportfs/exportfs $(INSTALLDIR)/nfs-utils/usr/sbin/exportfs
	install -D nfs-utils/utils/statd/statd $(INSTALLDIR)/nfs-utils/usr/sbin/statd
	install -D nfs-utils/utils/mountd/mountd $(INSTALLDIR)/nfs-utils/usr/sbin/mountd
	$(STRIP) -s $(INSTALLDIR)/nfs-utils/usr/sbin/*

nfs-utils-clean:
	-@$(MAKE) -C nfs-utils clean
	@rm -f nfs-utils/stamp-h1
ifneq ($(TCONFIG_BCMARM),y)
	$(call unpatch_files,nfs-utils)
endif

tinc/stamp-h1:
	$(call patch_files,tinc)
	cd tinc && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -I$(TOP)/$(OPENSSLDIR)/staged/usr/include" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -L$(TOP)/$(OPENSSLDIR)/staged/usr/lib" \
		LIBS="-lpthread" \
		$(CONFIGURE) \
			--prefix=/usr \
			--sysconfdir=/etc \
			--localstatedir=/var \
			--with-zlib-include="$(TOP)/zlib/staged/usr/include" \
			--with-zlib-lib="$(TOP)/zlib/staged/usr/lib" \
			--with-lzo-include="$(TOP)/lzo/include" \
			--with-lzo-lib="$(TOP)/lzo/src/.libs" \
			--with-openssl-include="$(TOP)/$(OPENSSLDIR)/staged/usr/include" \
			--with-openssl-lib="$(TOP)/$(OPENSSLDIR)/staged/usr/lib" \
			--disable-curses \
			--disable-readline
	@touch $@

tinc: tinc/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ LIBS="-lcrypto $(TOP)/zlib/staged/usr/lib/libz.a -llzo2 -lm -lpthread" $(PARALLEL_BUILD)

tinc-install:
	install -D tinc/src/tinc $(INSTALLDIR)/tinc/usr/sbin/tinc
	install -D tinc/src/tincd $(INSTALLDIR)/tinc/usr/sbin/tincd
	$(STRIP) $(INSTALLDIR)/tinc/usr/sbin/tinc
	$(STRIP) $(INSTALLDIR)/tinc/usr/sbin/tincd

tinc-clean:
	-@$(MAKE) -C tinc clean
	@rm -f tinc/stamp-h1
	$(call unpatch_files,tinc)

snmp/stamp-h1:
	$(call patch_files,snmp)
	cd snmp && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections $(OPTSIZE_FLAG)" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --with-persistent-directory=/tmp/snmp-persist --with-logfile=/var/log/snmpd.log \
		--disable-debugging --disable-manuals --disable-scripts --disable-applications --disable-privacy \
		--disable-ipv6 --disable-mibs --disable-mib-loading --disable-embedded-perl --with-perl-modules=no --without-opaque-special-types \
		--without-openssl --without-rsaref --without-kmem-usage --without-rpm \
		--with-out-transports=UDPIPv6,TCPIPv6,AAL5PVC,IPX,TCP,Unix \
		--with-out-mib-modules=snmpv3mibs,agent_mibs,agentx,notification,utilities,target \
		--with-mib-modules="\
			agent/extend,\
			host/hr_device,host/hr_disk,host/hr_filesys,host/hr_network,host/hr_partition,host/hr_print,host/hr_proc,host/hrSWRunTable,host/hr_storage,host/hr_system,\
			mibII/at,mibII/icmp,mibII/ifTable,mibII/ip,mibII/ipAddr,mibII/kernel_linux,mibII/snmp_mib,mibII/sysORTable,mibII/system_mib,mibII/tcp,mibII/udp,mibII/vacm_context,mibII/vacm_vars,mibII/var_route,\
			ucd-snmp/disk_hw,ucd-snmp/dlmod,ucd-snmp/extensible,ucd-snmp/loadave,ucd-snmp/logmatch,ucd-snmp/memory,ucd-snmp/pass,ucd-snmp/proc,ucd-snmp/proxy,ucd-snmp/vmstat,\
			util_funcs,if-mib/ifXTable,ip-mib/inetNetToMediaTable"\
		--with-default-snmp-version=2 --with-sys-contact=root --with-sys-location=Unknown \
		--with-endianness=little --enable-mini-agent --enable-shared=no --enable-static --with-gnu-ld \
		--enable-internal-md5 --enable-mfd-rewrites --with-defaults --with-copy-persistent-files=no
	@touch $@

snmp: snmp/stamp-h1
	@$(SEP)
	$(MAKE) -C snmp

snmp-install:
	install -D snmp/agent/snmpd $(INSTALLDIR)/snmp/usr/sbin/snmpd
	$(STRIP) $(INSTALLDIR)/snmp/usr/sbin/snmpd

snmp-clean:
	-@$(MAKE) -C snmp clean
	@rm -f snmp/stamp-h1
	$(call unpatch_files,snmp)

apcupsd/stamp-h1:
	$(call patch_files,apcupsd)
	cd apcupsd && touch autoconf/variables.mak && $(MAKE) configure && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		CPPFLAGS="-Os -Wall -ffunction-sections -fdata-sections" \
		LDFLAGS="-L$(TOOLCHAIN)/lib -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --without-x --enable-usb --disable-pcnet --enable-cgi \
			--disable-lgd --enable-net --sysconfdir=/usr/local/apcupsd --bindir=/bin \
			--disable-dumb --disable-snmp --with-cgi-bin=/www/apcupsd --with-serial-dev=
	@touch $@

apcupsd: apcupsd/stamp-h1
	@$(SEP)
	$(MAKE) -C apcupsd $(PARALLEL_BUILD)

apcupsd-install:
	$(MAKE) -C apcupsd DESTDIR=$(INSTALLDIR)/apcupsd install
	@rm -rf $(INSTALLDIR)/apcupsd/sbin/apctest
	@rm -rf $(INSTALLDIR)/apcupsd/www/apcupsd/ups*.cgi
	$(STRIP) $(INSTALLDIR)/apcupsd/sbin/*
	$(STRIP) $(INSTALLDIR)/apcupsd/www/apcupsd/*
	@mkdir -p $(INSTALLDIR)/apcupsd/usr/bin
	@cd $(INSTALLDIR)/apcupsd/usr/bin && ln -sf ../../bin/hostname hostname

apcupsd-clean:
	-@$(MAKE) -C apcupsd clean
	@rm -f apcupsd/stamp-h1
	@rm -f apcupsd/config*
	$(call unpatch_files,apcupsd)

libsodium/stamp-h1:
	cd libsodium && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		CPPFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-Wl,--gc-sections -fPIC"  \
		$(CONFIGURE) --prefix=/usr --disable-ssp --enable-minimal --without-pthreads --disable-shared --enable-static --disable-dependency-tracking
	@touch $@

libsodium: libsodium/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)

libsodium-install:
	@true

libsodium-clean:
	-$(MAKE) -C libsodium clean
	@rm -f libsodium/stamp-h1

dnscrypt/stamp-h1:
	cd dnscrypt && autoreconf && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -I$(TOP)/libsodium/src/libsodium/include -ffunction-sections -fdata-sections -fPIC" \
		CPPFLAGS="-Os -Wall $(EXTRACFLAGS) -I$(TOP)/libsodium/src/libsodium/include -ffunction-sections -fdata-sections" \
		LDFLAGS="-Wl,--gc-sections -L$(TOP)/libsodium/src/libsodium/.libs" \
		$(CONFIGURE) --prefix=/usr --disable-ssp --disable-dependency-tracking
	@touch $@

dnscrypt: dnscrypt/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)

dnscrypt-install:
	install -D dnscrypt/src/proxy/dnscrypt-proxy $(INSTALLDIR)/dnscrypt/usr/sbin/dnscrypt-proxy
	install -D dnscrypt/src/hostip/hostip $(INSTALLDIR)/dnscrypt/usr/sbin/hostip
	$(STRIP) -s $(INSTALLDIR)/dnscrypt/usr/sbin/dnscrypt-proxy
	$(STRIP) -s $(INSTALLDIR)/dnscrypt/usr/sbin/hostip

dnscrypt-clean:
	-@$(MAKE) -C dnscrypt clean
	@rm -f dnscrypt/stamp-h1 dnscrypt/Makefile
	@rm -rf dnscrypt/src/proxy/.deps

libyaml/stamp-h1:
	cd libyaml && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --sysconfdir=/etc --enable-static --disable-shared
	@touch $@

libyaml: libyaml/stamp-h1
	@$(SEP)
	$(MAKE) -C libyaml $(PARALLEL_BUILD)

libyaml-install:
	@true

libyaml-clean:
	-$(MAKE) -C libyaml clean
	@rm -f libyaml/stamp-h1
	@rm -rf libyaml/src/.deps libyaml/src/tests/.deps

getdns/build/Makefile:
	@rm -rf getdns/build && mkdir -p getdns/build
	$(call patch_files,getdns)
	cd getdns/build && $(call CMAKE_CrossOptions, crosscompiled.cmake) && \
		cmake -DCMAKE_TOOLCHAIN_FILE=crosscompiled.cmake \
			-DCMAKE_INSTALL_PREFIX:PATH=/usr \
			-DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SKIP_RPATH=TRUE \
			-DCMAKE_C_FLAGS="-ffunction-sections -fdata-sections -std=c99 $(EXTRACFLAGS)" \
			-DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections $(if $(TCONFIG_OPENSSL11),-lpthread,)" \
			-DENABLE_STATIC=TRUE -DENABLE_SHARED=FALSE -DENABLE_GOST=FALSE \
			-DBUILD_GETDNS_QUERY=FALSE \
			-DBUILD_GETDNS_SERVER_MON=FALSE \
			-DBUILD_STUBBY=TRUE -DENABLE_STUB_ONLY=TRUE \
			-DBUILD_LIBEV=FALSE -DBUILD_LIBEVENT2=FALSE -DBUILD_LIBUV=FALSE \
			-DBUILD_TESTING=FALSE \
			-DOPENSSL_INCLUDE_DIR=$(TOP)/$(OPENSSLDIR)/staged/usr/include \
			-DOPENSSL_CRYPTO_LIBRARY=$(TOP)/$(OPENSSLDIR)/staged/usr/lib/libcrypto.so \
			-DOPENSSL_SSL_LIBRARY=$(TOP)/$(OPENSSLDIR)/staged/usr/lib/libssl.so \
			-DLIBYAML_DIR=$(TOP)/libyaml \
			-DLIBYAML_INCLUDE_DIR=$(TOP)/libyaml/include \
			-DLIBYAML_LIBRARY=$(TOP)/libyaml/src/.libs/libyaml.a \
			-DCMAKE_DISABLE_FIND_PACKAGE_Libsystemd=TRUE \
			-DUSE_LIBIDN2=FALSE \
			-DFORCE_COMPAT_STRPTIME=TRUE \
			..

getdns: getdns/build/Makefile
	$(MAKE) -C getdns/build $(PARALLEL_BUILD)

getdns-install:
	install -d $(INSTALLDIR)/getdns/usr/sbin
	install -D getdns/build/stubby/stubby $(INSTALLDIR)/getdns/usr/sbin/stubby
	$(STRIP) -s $(INSTALLDIR)/getdns/usr/sbin/stubby

getdns-clean:
	@rm -rf getdns/build
	$(call unpatch_files,getdns)

tor/stamp-h1:
	cd tor && autoreconf -fsi && \
		CFLAGS="$(if $(TCONFIG_BCMARM),-O2,-Os) -Wall $(EXTRACFLAGS) -I$(TOP)/$(OPENSSLDIR)/staged/usr/include -ffunction-sections -fdata-sections $(if $(TCONFIG_KEYGEN),,-DOPENSSL_NO_ENGINE)" \
		CPPFLAGS="-I$(TOP)/$(OPENSSLDIR)/staged/usr/include" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --with-libevent-dir=$(TOP)/libevent/staged/usr/local \
			--with-openssl-dir=$(TOP)/$(OPENSSLDIR)/staged/usr --with-zlib-dir=$(TOP)/zlib/staged/usr \
			--disable-asciidoc --disable-tool-name-check --disable-unittests --disable-lzma \
			--disable-seccomp --disable-libscrypt --disable-zstd-advanced-apis \
			--disable-manpage --disable-html-manual --disable-dependency-tracking --disable-zstd --disable-systemd
	@touch $@

tor: tor/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)

tor-install:
	install -D tor/src/app/tor $(INSTALLDIR)/tor/usr/sbin/tor
	$(STRIP) -s $(INSTALLDIR)/tor/usr/sbin/tor

tor-clean:
	-@$(MAKE) -C tor clean
	@rm -f tor/stamp-h1 tor/Makefile

udpxy/stamp-h1:
	$(call patch_files,udpxy)
	@touch $@

udpxy: udpxy/stamp-h1
	@$(SEP)
	NO_UDPXREC=yes \
	$(MAKE) -C udpxy lean CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		CPPFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections"

udpxy-install:
	install -d $(INSTALLDIR)/udpxy/usr/bin
	install -D udpxy/udpxy $(INSTALLDIR)/udpxy/bin/udpxy
	$(STRIP) -s $(INSTALLDIR)/udpxy/bin/udpxy

udpxy-clean:
	-@$(MAKE) -C udpxy clean
	@rm -f udpxy/stamp-h1
	$(call unpatch_files,udpxy)

mdadm:
	@$(SEP)
	$(MAKE) -C mdadm mdadm $(PARALLEL_BUILD)

mdadm-install:
	install -D mdadm/mdadm $(INSTALLDIR)/mdadm/usr/sbin/mdadm
	$(STRIP) -s $(INSTALLDIR)/mdadm/usr/sbin/mdadm

mdadm-clean:
	-@$(MAKE) -C mdadm clean

ipset/stamp-h1:
	$(call patch_files,ipset)
	cd ipset && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -L$(TOP)/libmnl/staged/usr/lib -lmnl" \
		libmnl_CFLAGS="-I$(TOP)/libmnl/staged/usr/include" \
		libmnl_LIBS="-L$(TOP)/libmnl/staged/usr/lib -lmnl" \
		$(CONFIGURE) --prefix=/usr --with-kmod=no
	@touch $@

ipset: ipset/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)

ipset-install:
	install -D ipset/src/ipset $(INSTALLDIR)/ipset/usr/sbin/ipset
	install -d $(INSTALLDIR)/ipset/usr/lib/
	install ipset/lib/.libs/libipset.so.11.1.0 $(INSTALLDIR)/ipset/usr/lib/libipset.so.11.1.0
	$(STRIP) $(INSTALLDIR)/ipset/usr/lib/libipset.so.11.1.0
	$(STRIP) $(INSTALLDIR)/ipset/usr/sbin/ipset
	cd $(INSTALLDIR)/ipset/usr/lib/ && \
		ln -sf libipset.so.11.1.0 libipset.so.11 && \
		ln -sf libipset.so.11.1.0 libipset.so

ipset-clean:
	-@$(MAKE) -C ipset clean
	@rm -f ipset/stamp-h1 ipset/Makefile
	$(call unpatch_files,ipset)

ipset-6.24:
	@$(SEP)
	$(call patch_files,ipset-6.24)
	$(MAKE) -C $@ binaries COPT_FLAGS="-Os -Wall $(EXTRACFLAGS) $(OPTSIZE_FLAG) -ffunction-sections -fdata-sections --param large-function-growth=800 --param max-inline-insns-single=3000"

ipset-6.24-install:
	install -D ipset-6.24/ipset $(INSTALLDIR)/ipset-6.24/usr/sbin/ipset
	install -d $(INSTALLDIR)/ipset-6.24/usr/lib/
	install ipset-6.24/*.so $(INSTALLDIR)/ipset-6.24/usr/lib/
	$(STRIP) $(INSTALLDIR)/ipset-6.24/usr/lib/*.so
	$(STRIP) $(INSTALLDIR)/ipset-6.24/usr/sbin/ipset

ipset-6.24-clean:
	-@$(MAKE) -C ipset-6.24 clean
	$(call unpatch_files,ipset-6.24)

libjson-c/build/Makefile:
	$(call patch_files,libjson-c)
	@rm -rf libjson-c/build && mkdir -p libjson-c/build
	cd libjson-c/build && $(call CMAKE_CrossOptions, crosscompiled.cmake) && \
		cmake -DCMAKE_TOOLCHAIN_FILE=crosscompiled.cmake \
			-DCMAKE_INSTALL_PREFIX:PATH=/usr \
			-DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SKIP_RPATH=TRUE \
			-DCMAKE_C_FLAGS="-ffunction-sections -fdata-sections $(EXTRACFLAGS)" \
			-DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections" \
			-DBUILD_TESTING=FALSE \
			-DBUILD_STATIC_LIBS=FALSE \
			$(if $(TCONFIG_BCMARM),,-DDISABLE_WERROR=TRUE) \
			..

libjson-c: libjson-c/build/Makefile
	@$(SEP)
	$(MAKE) -C libjson-c/build all $(PARALLEL_BUILD)
	cd libjson-c && ln -sf build/json_config.h json_config.h

libjson-c-clean:
	@rm -rf libjson-c/build
	$(call unpatch_files,libjson-c)

uqmi: libjson-c
	@$(SEP)
	$(call patch_files,libubox)
	$(MAKE) -C uqmi/libubox
	$(MAKE) -C uqmi SHARED=0 CC='$(CC) -static'

uqmi-install:
	install -D uqmi/uqmi $(INSTALLDIR)/uqmi/usr/sbin/uqmi
	$(STRIP) $(INSTALLDIR)/uqmi/usr/sbin/uqmi

uqmi-clean: libjson-c-clean
	-@$(MAKE) -C uqmi/libubox clean
	$(call unpatch_files,libubox)
	-@$(MAKE) -C uqmi clean

comgt:
	@$(SEP)
	$(call patch_files,comgt)
	@$(MAKE) -C $@ CFLAGS="-Os $(EXTRACFLAGS)" LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" comgt

comgt-install:
	install -D comgt/comgt $(INSTALLDIR)/comgt/usr/sbin/comgt
	cd $(INSTALLDIR)/comgt/usr/sbin/ && \
		ln -sf comgt gcom
	$(STRIP) -s $(INSTALLDIR)/comgt/usr/sbin/comgt
	@mkdir -p $(TARGETDIR)/rom/etc/gcom
	@cp -f comgt/gcom/* $(TARGETDIR)/rom/etc/gcom/

comgt-clean:
	-@$(MAKE) -C comgt clean
	$(call unpatch_files,comgt)

sd-idle:
	@$(SEP)
	$(MAKE) -C sd-idle CFLAGS="-Os -Wall $(EXTRACFLAGS)"

sd-idle-install:
	install -d $(INSTALLDIR)/sd-idle/usr/bin
	install -D -m 0755 sd-idle/sd-idle $(INSTALLDIR)/sd-idle/usr/bin/sd-idle
	$(STRIP) -s $(INSTALLDIR)/sd-idle/usr/bin/sd-idle

sd-idle-clean:
	-@$(MAKE) -C sd-idle clean

iperf/stamp-h1:
	$(call patch_files,iperf)
	cd iperf && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		ac_cv_func_clock_gettime="no" \
		ac_cv_func_daemon="no" \
		$(CONFIGURE) --prefix=/usr --disable-profiling --without-openssl
	@touch $@

iperf: iperf/stamp-h1
	@$(SEP)
	$(MAKE) -C iperf

iperf-install:
	install -D iperf/src/.libs/iperf3 $(INSTALLDIR)/iperf/usr/sbin/iperf
	install -d $(INSTALLDIR)/iperf/usr/lib/
	install iperf/src/.libs/libiperf.so.0.0.0 $(INSTALLDIR)/iperf/usr/lib/libiperf.so.0.0.0
	$(STRIP) $(INSTALLDIR)/iperf/usr/lib/libiperf.so.0.0.0
	$(STRIP) $(INSTALLDIR)/iperf/usr/sbin/iperf
	cd $(INSTALLDIR)/iperf/usr/lib/ && \
		ln -sf libiperf.so.0.0.0 libiperf.so.0 && \
		ln -sf libiperf.so.0.0.0 libiperf.so

iperf-clean:
	-@$(MAKE) -C iperf clean
	@rm -f iperf/stamp-h1 iperf/Makefile
	$(call unpatch_files,iperf)

libdaemon/stamp-h1:
	cd libdaemon && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr --disable-dependency-tracking ac_cv_func_setpgrp_void=yes
	touch $@

libdaemon: libdaemon/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@
	@$(MAKE) -C $@ DESTDIR=$(TOP)/libdaemon/staged install

libdaemon-install:
	install -D libdaemon/libdaemon/.libs/libdaemon.so.0.5.0 $(INSTALLDIR)/libdaemon/usr/lib/libdaemon.so.0.5.0
	$(STRIP) $(INSTALLDIR)/libdaemon/usr/lib/*.so.*
	cd $(INSTALLDIR)/libdaemon/usr/lib && \
		ln -sf libdaemon.so.0.5.0 libdaemon.so && \
		ln -sf libdaemon.so.0.5.0 libdaemon.so.0

libdaemon-clean:
	-@$(MAKE) -C libdaemon distclean
	@rm -f libdaemon/stamp-h1

expat/stamp-h1:
	cd expat && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		$(CONFIGURE) --prefix=/usr
	touch $@

expat: expat/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)
	@$(MAKE) -C $@ DESTDIR=$(TOP)/expat/staged install

expat-install:
	install -D expat/.libs/libexpat.so.1.6.2 $(INSTALLDIR)/expat/usr/lib/libexpat.so.1.6.2
	$(STRIP) $(INSTALLDIR)/expat/usr/lib/libexpat.so.1.6.2
	cd $(INSTALLDIR)/expat/usr/lib && ln -sf libexpat.so.1.6.2 libexpat.so.1

expat-clean:
	-@$(MAKE) -C expat clean
	@rm -f expat/stamp-h1

avahi/stamp-h1:
	$(call patch_files,avahi)
	cd avahi && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -I$(TOP)/expat/lib" \
		LDFLAGS="-L$(TOP)/expat/.libs -ldl -lpthread -ffunction-sections -fdata-sections -Wl,--gc-sections" \
		LIBDAEMON_CFLAGS="-I$(TOP)/libdaemon" \
		LIBDAEMON_LIBS="-L$(TOP)/libdaemon/libdaemon/.libs -ldaemon $(EXTRALDFLAGS)" \
		$(CONFIGURE) --prefix=/usr --sysconfdir=/etc localstatedir=/var --with-distro=none \
			--enable-introspection=no \
			--disable-nls --disable-glib --disable-gobject \
			--disable-qt3 --disable-qt4 --disable-gtk --disable-gtk3 \
			--disable-dbus --disable-gdbm --disable-python --disable-python-dbus \
			--disable-mono --disable-monodoc --disable-autoipd \
			--disable-doxygen-doc --disable-manpages --disable-xmltoman \
			--with-xml=expat \
			--with-avahi-user="nobody" --with-avahi-group="nobody" \
			--disable-stack-protector \
			--disable-dependency-tracking \
			avahi_runtime_dir=/var/run servicedir=/etc/avahi/services
	@touch $@

avahi: avahi/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

avahi-install:
	install -D avahi/avahi-daemon/.libs/avahi-daemon $(INSTALLDIR)/avahi/usr/sbin/avahi-daemon
	install -D avahi/avahi-common/.libs/libavahi-common.so.3.5.3 $(INSTALLDIR)/avahi/usr/lib/libavahi-common.so.3.5.3
	install -D avahi/avahi-core/.libs/libavahi-core.so.7.0.2 $(INSTALLDIR)/avahi/usr/lib/libavahi-core.so.7.0.2
	$(STRIP) $(INSTALLDIR)/avahi/usr/sbin/avahi-daemon
	$(STRIP) $(INSTALLDIR)/avahi/usr/lib/libavahi-common.so.3.5.3
	$(STRIP) $(INSTALLDIR)/avahi/usr/lib/libavahi-core.so.7.0.2
	cd $(INSTALLDIR)/avahi/usr/lib && ln -sf libavahi-common.so.3.5.3 libavahi-common.so.3
	cd $(INSTALLDIR)/avahi/usr/lib && ln -sf libavahi-core.so.7.0.2 libavahi-core.so.7

avahi-clean:
	-@$(MAKE) -C avahi distclean
	@rm -f avahi/stamp-h1
	$(call unpatch_files,avahi)

wireguard-tools:
	WITH_BASHCOMPLETION=no WITH_WGQUICK=no WITH_SYSTEMDUNITS=no PREFIX=$(TOP)/wireguard-tools/staged CFLAGS="-I uapi/linux $(EXTRACFLAGS)" $(MAKE) -C wireguard-tools/src install

wireguard-tools-install:
	install -D wireguard-tools/staged/bin/wg $(INSTALLDIR)/wireguard-tools/usr/sbin/wg
	$(STRIP) -s $(INSTALLDIR)/wireguard-tools/usr/sbin/wg
	chmod 0500 $(INSTALLDIR)/wireguard-tools/usr/sbin/wg

wireguard-tools-clean:
	$(MAKE) -C wireguard-tools/src clean
	@rm -f $(TOP)/wireguard-tools/staged/bin/wg

gettext-tiny/stamp-h1:
	$(MAKE) -C gettext-tiny \
		prefix=/usr \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections"
	@touch $@

gettext-tiny: gettext-tiny/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ \
		prefix=/usr \
		DESTDIR=$(TOP)/gettext-tiny/staged \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		install

gettext-tiny-install:
	@true

gettext-tiny-clean:
	-@$(MAKE) -C gettext-tiny clean
	@rm -f gettext-tiny/stamp-h1
	@rm -rf gettext-tiny/staged

util-linux/stamp-h1:
	$(call patch_files,util-linux)
	cd util-linux && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) \
			--prefix=/usr \
			--disable-all-programs \
			--enable-libuuid \
			--enable-libblkid \
			--without-btrfs \
			--without-systemd \
			--without-python \
			--disable-hwclock \
			--disable-hwclock-cmos \
			--disable-shared
	@touch $@

util-linux: util-linux/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)
	@$(MAKE) -C $@ DESTDIR=$(TOP)/util-linux/staged install

util-linux-install:
	@true

util-linux-clean:
	-@$(MAKE) -C util-linux clean
	@rm -f util-linux/stamp-h1
	@rm -rf util-linux/staged
	$(call patch_files,util-linux)

zfs/stamp-h1:
	$(call patch_files,zfs)
	cd zfs && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		CPPFLAGS="-I$(TOP)/zlib/staged/usr/include -I$(TOP)/util-linux/staged/usr/include -I$(TOP)/$(OPENSSLDIR)/staged/usr/include -I$(TOP)/gettext-tiny/staged/usr/include" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -L$(TOP)/zlib/staged/usr/lib -L$(TOP)/util-linux/staged/usr/lib -L$(TOP)/$(OPENSSLDIR)/staged/usr/lib -L$(TOP)/gettext-tiny/staged/usr/lib" \
		$(CONFIGURE) \
			--prefix=/usr \
			--sysconfdir=/etc \
			--localstatedir=/var \
			--with-config=user \
			--disable-nls \
			--disable-pyzfs \
			--disable-shared
	@touch $@

zfs: zfs/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)

zfs-install:
	install -D zfs/cmd/zfs/zfs $(INSTALLDIR)/zfs/usr/sbin/zfs
	install -D zfs/cmd/zpool/zpool $(INSTALLDIR)/zfs/usr/sbin/zpool
	$(STRIP) $(INSTALLDIR)/zfs/usr/sbin/zfs
	$(STRIP) $(INSTALLDIR)/zfs/usr/sbin/zpool

zfs-clean:
	-@$(MAKE) -C zfs clean
	@rm -f zfs/stamp-h1
	$(call unpatch_files,zfs)

libmnl/stamp-h1:
	cd libmnl && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		$(CONFIGURE) --prefix=/usr
	@touch $@

libmnl: libmnl/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/libmnl/staged install
	@rm -f $(TOP)/libmnl/staged/usr/lib/libmnl.la

libmnl-install:
	install -d $(INSTALLDIR)/libmnl/usr/lib/
	install libmnl/src/.libs/libmnl.so.0.2.0 $(INSTALLDIR)/libmnl/usr/lib/libmnl.so.0.2.0
	$(STRIP) $(INSTALLDIR)/libmnl/usr/lib/libmnl.so.0.2.0
	cd $(INSTALLDIR)/libmnl/usr/lib/ && \
		ln -sf libmnl.so.0.2.0 libmnl.so.0 && \
		ln -sf libmnl.so.0.2.0 libmnl.so

libmnl-clean:
	-@$(MAKE) -C libmnl clean
	@rm -f libmnl/stamp-h1
	@rm -rf libmnl/staged

libnetfilter_conntrack/stamp-h1:
	cd libnetfilter_conntrack && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -I$(TOP)/libnfnetlink/include -I$(TOP)/libmnl/staged/usr/include" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -L$(TOP)/libnfnetlink/src/.libs -L$(TOP)/libmnl/staged/usr/lib" \
		PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/libnfnetlink:$(TOP)/libmnl" \
		$(CONFIGURE) --prefix=/usr
	@touch $@

libnetfilter_conntrack: libnetfilter_conntrack/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/libnetfilter_conntrack/staged install
	@rm -f libnetfilter_conntrack/staged/usr/lib/libnetfilter_conntrack.la

libnetfilter_conntrack-install:
	install -d $(INSTALLDIR)/libnetfilter_conntrack/usr/lib/
	install libnetfilter_conntrack/src/.libs/libnetfilter_conntrack.so.3.7.0 \
	$(INSTALLDIR)/libnetfilter_conntrack/usr/lib/libnetfilter_conntrack.so.3.7.0
	$(STRIP) $(INSTALLDIR)/libnetfilter_conntrack/usr/lib/libnetfilter_conntrack.so.3.7.0
	cd $(INSTALLDIR)/libnetfilter_conntrack/usr/lib/ && \
		ln -sf libnetfilter_conntrack.so.3.7.0 libnetfilter_conntrack.so.3 && \
		ln -sf libnetfilter_conntrack.so.3.7.0 libnetfilter_conntrack.so

libnetfilter_conntrack-clean:
	-@$(MAKE) -C libnetfilter_conntrack clean
	@rm -f libnetfilter_conntrack/stamp-h1 libnetfilter_conntrack/Makefile
	@rm -rf libnetfilter_conntrack/staged


libnetfilter_log/stamp-h1:
	cd libnetfilter_log && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -I$(TOP)/libnfnetlink/include" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -L$(TOOLCHAIN)/lib -L$(TOP)/libnfnetlink/src/.libs" \
		PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/libnfnetlink" \
		$(CONFIGURE) --prefix=/usr
	@touch $@

libnetfilter_log: libnetfilter_log/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
#	$(MAKE) -C $@ DESTDIR=$(TOP)/libnetfilter_log/staged install

libnetfilter_log-install:
	install -d $(INSTALLDIR)/libnetfilter_log/usr/lib/
	install libnetfilter_log/src/.libs/libnetfilter_log.so.1.1.0 \
	$(INSTALLDIR)/libnetfilter_log/usr/lib/libnetfilter_log.so.1.1.0
	$(STRIP) $(INSTALLDIR)/libnetfilter_log/usr/lib/libnetfilter_log.so.1.1.0
	cd $(INSTALLDIR)/libnetfilter_log/usr/lib/ && \
		ln -sf libnetfilter_log.so.1.1.0 libnetfilter_log.so.1 && \
		ln -sf libnetfilter_log.so.1.1.0 libnetfilter_log.so

libnetfilter_log-clean:
	-@$(MAKE) -C libnetfilter_log clean
	@rm -f libnetfilter_log/stamp-h1 libnetfilter_log/Makefile
	@rm -rf libnetfilter_log/staged

libnetfilter_queue/stamp-h1:
	cd libnetfilter_queue && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -I$(TOP)/libnfnetlink/include -I$(TOP)/libmnl/staged/usr/include" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections -L$(TOP)/libnfnetlink/src/.libs -L$(TOP)/libmnl/staged/usr/lib" \
		PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/libnfnetlink:$(TOP)/libmnl" \
		$(CONFIGURE) --prefix=/usr
	@touch $@

libnetfilter_queue: libnetfilter_queue/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/libnetfilter_queue/staged install

libnetfilter_queue-install:
	install -d $(INSTALLDIR)/libnetfilter_queue/usr/lib/
	install libnetfilter_queue/src/.libs/libnetfilter_queue.so.1.4.0 \
	$(INSTALLDIR)/libnetfilter_queue/usr/lib/libnetfilter_queue.so.1.4.0
	$(STRIP) $(INSTALLDIR)/libnetfilter_queue/usr/lib/libnetfilter_queue.so.1.4.0
	cd $(INSTALLDIR)/libnetfilter_queue/usr/lib/ && \
		ln -sf libnetfilter_queue.so.1.4.0 libnetfilter_queue.so.1 && \
		ln -sf libnetfilter_queue.so.1.4.0 libnetfilter_queue.so

libnetfilter_queue-clean:
	-@$(MAKE) -C libnetfilter_queue clean
	@rm -f libnetfilter_queue/stamp-h1 libnetfilter_queue/Makefile
	@rm -rf libnetfilter_queue/staged

conntrack-tools/stamp-h1:
	cd conntrack-tools && autoreconf -fsi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -I$(TOP)/libnfnetlink/include -I$(TOP)/libmnl/staged/usr/include \
			-I$(TOP)/libnetfilter_conntrack/staged/usr/include -I$(TOP)/libnetfilter_log/staged/usr/include -I$(TOP)/libnetfilter_queue/staged/usr/include" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections 	-L$(TOP)/libnfnetlink/src/.libs -L$(TOP)/libmnl/staged/usr/lib \
			-L$(TOP)/libnetfilter_conntrack/staged/usr/lib -L$(TOP)/libnetfilter_log/staged/usr/lib -L$(TOP)/libnetfilter_queue/staged/usr/lib" \
		PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(TOP)/libnfnetlink:$(TOP)/libmnl:$(TOP)/libnetfilter_conntrack/staged/usr/lib/pkgconfig:$(TOP)/libnetfilter_log/staged/usr/lib/pkgconfig:$(TOP)/libnetfilter_queue/staged/usr/lib/pkgconfig" \
		$(CONFIGURE) --prefix=/usr --disable-cthelper --disable-cttimeout
	@touch $@

conntrack-tools: conntrack-tools/stamp-h1
	@$(SEP)
	$(MAKE) -C $@ $(PARALLEL_BUILD)
	$(MAKE) -C $@ DESTDIR=$(TOP)/conntrack-tools/staged install

conntrack-tools-install:
	install -d $(INSTALLDIR)/conntrack-tools/usr/sbin
	install conntrack-tools/src/conntrack $(INSTALLDIR)/conntrack-tools/usr/sbin/conntrack
	$(STRIP) -s $(INSTALLDIR)/conntrack-tools/usr/sbin/conntrack

conntrack-tools-clean:
	-@$(MAKE) -C conntrack-tools clean
	@rm -f conntrack-tools/stamp-h1 conntrack-tools/Makefile
	@rm -rf conntrack-tools/staged

eapd$(BCMEX)-clean:
	-@cd eapd$(BCMEX)/linux && make clean

ufsd-asus: kernel_header kernel
	@$(MAKE) -C $@ all

ufsd-asus-install:
	@$(MAKE) -C ufsd-asus INSTALLDIR=$(INSTALLDIR)/ufsd-asus install

diskdev_cmds-332.25:
	@$(SEP)
	$(call patch_files,diskdev_cmds-332.25)
	cd diskdev_cmds-332.25 && \
		make -f Makefile.lnx

diskdev_cmds-332.25-install:
	install -D diskdev_cmds-332.25/newfs_hfs.tproj/newfs_hfs $(INSTALLDIR)/diskdev_cmds-332.25/usr/sbin/mkfs.hfsplus
	install -D diskdev_cmds-332.25/fsck_hfs.tproj/fsck_hfs $(INSTALLDIR)/diskdev_cmds-332.25/usr/sbin/fsck.hfsplus
	$(STRIP) $(INSTALLDIR)/diskdev_cmds-332.25/usr/sbin/mkfs.hfsplus
	$(STRIP) $(INSTALLDIR)/diskdev_cmds-332.25/usr/sbin/fsck.hfsplus
	cd $(INSTALLDIR)/diskdev_cmds-332.25/usr/sbin && \
		rm -f mkfs.hfs && \
		rm -f fsck.hfs && \
		ln -s mkfs.hfsplus mkfs.hfs && \
		ln -s fsck.hfsplus fsck.hfs

diskdev_cmds-332.25-clean:
	cd diskdev_cmds-332.25 && \
		make -f Makefile.lnx clean
	rm -f $(INSTALLDIR)/diskdev_cmds-332.25/usr/sbin/mkfs.hfs
	rm -f $(INSTALLDIR)/diskdev_cmds-332.25/usr/sbin/fsck.hfs
	$(call unpatch_files,diskdev_cmds-332.25)

libffi/stamp-h1:
	cd libffi && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -fPIC" \
		$(CONFIGURE) --prefix=/usr --libdir=/usr/lib --disable-builddir --disable-dependency-tracking
	@touch $@

libffi: libffi/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@
	@$(MAKE) -C $@ DESTDIR=$(TOP)/libffi/staged install
	@rm -f libffi/staged/usr/lib/libffi.la

libffi-install:
	install -D $(TOP)/libffi/.libs/libffi.so.6.0.4 $(INSTALLDIR)/libffi/usr/lib/libffi.so.6.0.4
	$(STRIP) $(INSTALLDIR)/libffi/usr/lib/libffi.so.6.0.4
	cd $(INSTALLDIR)/libffi/usr/lib && \
		ln -sf libffi.so.6.0.4 libffi.so.6 && \
		ln -sf libffi.so.6.0.4 libffi.so

libffi-clean:
	-@$(MAKE) -C libffi distclean
	@rm -f libffi/stamp-h1

glib2/stamp-h1:
	$(call patch_files,glib2)
	cd glib2 && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC" \
		CPPFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -fPIC -I$(TOP)/libiconv/staged/usr/include -I$(TOP)/zlib/staged/usr/include -I$(TOP)/glib2" \
		LDFLAGS="-Wl,--gc-sections -fPIC -L$(TOP)/libiconv/staged/usr/lib -L$(TOP)/libffi/staged/usr/lib -L$(TOP)/zlib/staged/usr/lib -ldl -lpthread -lz -liconv -lffi -L$(TOOLCHAIN)/arm-buildroot-linux-uclibcgnueabi/sysroot/lib" \
		LIBFFI_CFLAGS="-I$(TOP)/libffi/staged/usr/lib/libffi-3.2.1/include" \
		LIBFFI_LIBS="$(TOP)/libffi/staged/usr/lib/libffi.so" \
		LIBS="$(TOP)/libffi/staged/usr/lib/libffi.so $(TOP)/libiconv/staged/usr/lib/libiconv.so" \
		$(CONFIGURE) --prefix=/usr --libdir=/usr/lib --enable-debug=no --enable-man=no \
			--disable-selinux --disable-fam --with-libiconv=gnu --disable-dependency-tracking
	@touch $@

glib2: glib2/stamp-h1
	@$(SEP)
	@$(MAKE) -C $@ $(PARALLEL_BUILD)
#	@$(MAKE) -C $@ DESTDIR=$(TOP)/glib2/staged install

glib2-install: glib2
	install -D glib2/glib/.libs/libglib-2.0.so.0.3707.0 $(INSTALLDIR)/glib2/usr/lib/libglib-2.0.so.0.3707.0
	$(STRIP) $(INSTALLDIR)/glib2/usr/lib/libglib-2.0.so.0.3707.0
	-@rm -rf $(INSTALLDIR)/glib2/usr/share
	cd $(INSTALLDIR)/glib2/usr/lib && \
		ln -sf libglib-2.0.so.0.3707.0 libglib-2.0.so.0 && \
		ln -sf libglib-2.0.so.0.3707.0 libglib-2.0.so

glib2-clean:
	-@$(MAKE) -C glib2 distclean
	@rm -f glib2/stamp-h1
	$(call unpatch_files,glib2)

irqbalance/stamp-h1:
	$(call patch_files,irqbalance)
	cd irqbalance && ./autogen.sh && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		CPPFLAGS="-I$(TOP)/glib2/glib -I$(TOP)/libiconv/staged/usr/include -I$(TOP)/libffi/staged/usr/lib/libffi-3.2.1/include" \
		LDFLAGS="-Wl,--gc-sections -L$(TOP)/libiconv/staged/usr/lib -L$(TOP)/libffi/staged/usr/lib -L$(TOP)/glib2/glib/.libs -lglib-2.0" \
		LIBS="$(TOP)/libffi/staged/usr/lib/libffi.so $(TOP)/libiconv/staged/usr/lib/libiconv.so" \
		GLIB2_CFLAGS="-I$(TOP)/glib2/staged/usr/include/glib-2.0 -I$(TOP)/glib2" \
		GLIB2_LIBS="-L$(TOP)/glib2/glib/.libs -lglib-2.0" \
		$(CONFIGURE) --prefix=/usr --enable-static=glib2 --with-libcap_ng=no \
			--with-systemd=no --without-irqbalance-ui --disable-numa --disable-dependency-tracking
	@touch $@

irqbalance: irqbalance/stamp-h1
	@$(SEP)
	$(MAKE) -C $@

irqbalance-install: 
	install -D irqbalance/irqbalance $(INSTALLDIR)/irqbalance/usr/sbin/irqbalance
	$(STRIP) $(INSTALLDIR)/irqbalance/usr/sbin/irqbalance
	@rm -rf $(INSTALLDIR)/irqbalance/usr/share

irqbalance-clean: 
	-@$(MAKE) -C irqbalance clean
	@rm -f irqbalance/stamp-h1
	$(call unpatch_files,irqbalance)


#
# Generic rules
#

%:
	@[ ! -d $* ] || ( $(SEP); $(MAKE) -C $* )

%-clean:
	@-[ ! -d $* ] || $(MAKE) -C $* clean

%-distclean:
	@-[ ! -d $* ] || $(MAKE) -C $* distclean

%-install:
	@[ ! -d $* ] || $(MAKE) -C $* install INSTALLDIR=$(INSTALLDIR)/$*

%-build:
	$(MAKE) $*-clean $*


$(obj-y) $(obj-n) $(obj-clean) $(obj-install): dummy

.PHONY: all clean distclean mrproper install package image
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy libnet libpcap
